var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import "@ui5/webcomponents/dist/Switch.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import "@ui5/webcomponents-icons/dist/accept.js";
import "@ui5/webcomponents-icons/dist/decline.js";
import "@ui5/webcomponents-icons/dist/less.js";
// Template
import SwitchTemplate from "./generated/templates/SwitchTemplate.lit.js";
// Styles
import SwitchCss from "./generated/themes/Switch.css.js";
var SwitchColor;
(function (SwitchColor) {
    SwitchColor["NonSemantic"] = "Non-Semantic";
    SwitchColor["Semantic"] = "Semantic";
})(SwitchColor || (SwitchColor = {}));
let Switch = class Switch extends UI5Element {
    handleSwitchClick() {
        if (!this.disabled) {
            this.checked = !this.checked;
            this.fireEvent("change", null, true);
        }
    }
    handleSwitchKeyDown(e) {
        if (e.key === "Enter") {
            this.handleSwitchClick();
        }
    }
    get switchTabIndex() {
        return this.disabled ? undefined : "0";
    }
    get isActiveTrackClass() {
        return this.checked ? "udex-switch__track--active" : "udex-switch__track--inactive";
    }
    get isSemanticColor() {
        return this.color === SwitchColor.Semantic;
    }
};
__decorate([
    property({ type: String, defaultValue: "" })
], Switch.prototype, "label", void 0);
__decorate([
    property({ type: SwitchColor, defaultValue: SwitchColor.NonSemantic })
], Switch.prototype, "color", void 0);
__decorate([
    property({ type: String, defaultValue: "" })
], Switch.prototype, "accessibleName", void 0);
__decorate([
    property({ type: Boolean, defaultValue: false })
], Switch.prototype, "checked", void 0);
__decorate([
    property({ type: Boolean, defaultValue: false })
], Switch.prototype, "disabled", void 0);
__decorate([
    property({ type: String, defaultValue: "" })
], Switch.prototype, "tooltip", void 0);
Switch = __decorate([
    customElement({
        tag: "udex-switch",
        renderer: litRender,
        styles: SwitchCss,
        template: SwitchTemplate,
    })
    /**
     * Fired when the component checked state changes.
     *
     * @allowPreventDefault
     * @public
     */
    ,
    event("change")
], Switch);
Switch.define();
export default Switch;
//# sourceMappingURL=Switch.js.map