var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DropdownList_1;
import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import { isUp, isDown, isHome, isEnd, } from "@ui5/webcomponents-base/dist/Keys.js";
import { getI18nBundle } from "@ui5/webcomponents-base/dist/i18nBundle.js";
import browserScrollbarCSS from "@ui5/webcomponents/dist/generated/themes/BrowserScrollbar.css.js";
import DropdownListTemplate from "./generated/templates/DropdownListTemplate.lit.js";
import { ARIA_LABEL_DROPDOWN_LIST_MULTISELECTABLE, ARIA_LABEL_DROPDOWN_LIST_SELECTABLE } from "./generated/i18n/i18n-defaults.js";
// Styles
import DropdownListCss from "./generated/themes/DropdownList.css.js";
export var DropdownListMode;
(function (DropdownListMode) {
    DropdownListMode["SingleSelect"] = "SingleSelect";
    DropdownListMode["MultiSelect"] = "MultiSelect";
})(DropdownListMode || (DropdownListMode = {}));
/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 *
 * <h3>Usage</h3>
 *
 * For the <code>udex-dropdown-list</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @udex/web-components/dist/DropdownList.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webc.web-components.DropdownList
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-dropdown-list
 * @public
 */
let DropdownList = DropdownList_1 = class DropdownList extends UI5Element {
    static async onDefine() {
        DropdownList_1.i18nBundle = await getI18nBundle("sap-ui-webcomponents-bundle");
    }
    onBeforeRendering() {
        this.prepareListItemsMode();
    }
    handleItemPress(e) {
        e.stopPropagation();
        const clickedItem = e.target;
        if (this.mode === DropdownListMode.SingleSelect) {
            this.revertSelectedItems();
            clickedItem.selected = true;
        }
        this.fireEvent("selection-change", {
            selectedItems: this.getSelectedItems(),
            item: clickedItem,
        });
    }
    handleKeyDown(e) {
        this.handleUpArrow(e);
        this.handleDownArrow(e);
        this.handleHomeKey(e);
        this.handleEndKey(e);
    }
    handleUpArrow(e) {
        if (isUp(e)) {
            e.preventDefault();
            const items = this.getKeyboardNavigationItems();
            const currentSelectedIndex = this.getCurrentIndex(items, e.target);
            const previousSelectIndex = currentSelectedIndex - 1 < 0 ? items.length - 1 : currentSelectedIndex - 1;
            const isHeaderItem = this.isHeader(items[previousSelectIndex]);
            if (isHeaderItem) {
                this.focusHeader(items[previousSelectIndex]);
                return;
            }
            items[previousSelectIndex].focus();
        }
    }
    handleDownArrow(e) {
        if (isDown(e)) {
            e.preventDefault();
            const items = this.getKeyboardNavigationItems();
            const currentSelectedIndex = this.getCurrentIndex(items, e.target);
            const nextSelectIndex = currentSelectedIndex + 1 > items.length - 1 ? 0 : currentSelectedIndex + 1;
            const isHeaderItem = this.isHeader(items[nextSelectIndex]);
            if (isHeaderItem) {
                this.focusHeader(items[nextSelectIndex]);
                return;
            }
            items[nextSelectIndex].focus();
        }
    }
    handleHomeKey(e) {
        if (isHome(e)) {
            const items = this.getKeyboardNavigationItems();
            const isHeaderItem = this.isHeader(items[0]);
            if (isHeaderItem) {
                this.focusHeader(items[0]);
                return;
            }
            items[0].focus();
        }
    }
    handleEndKey(e) {
        if (isEnd(e)) {
            e.preventDefault();
            const items = this.getKeyboardNavigationItems();
            items[items.length - 1].focus();
        }
    }
    revertSelectedItems() {
        const previouslySelectedItems = this.getSelectedItems();
        previouslySelectedItems.forEach((item) => {
            item.selected = false;
        });
    }
    focusHeader(item) {
        const header = item.shadowRoot?.querySelector(".udex-dropdown-list__group-header");
        header.focus();
    }
    getItems() {
        return this.getSlottedNodes("items");
    }
    getSelectedItems() {
        return this.getItemsFromList().filter(item => item.selected);
    }
    getCurrentIndex(items, item) {
        return items.indexOf(item);
    }
    getItemsWithoutHeader() {
        return this.getItemsFromList().filter(item => !this.isHeader(item));
    }
    getKeyboardNavigationItems() {
        const items = this.modeMultiSelect ? this.getItemsFromList() : this.getItemsWithoutHeader();
        return items.filter(item => !item.disabled);
    }
    getItemsFromList() {
        const items = [];
        const slottedItems = this.getItems();
        slottedItems.forEach(item => {
            const childItems = item.children.length > 0 ? item.getItems() : [];
            items.push(item, ...childItems);
        });
        return items;
    }
    prepareListItemsMode() {
        const slottedItems = this.getItemsFromList();
        slottedItems.forEach(item => {
            item.mode = this.mode;
        });
    }
    isHeader(item) {
        return item.tagName === "UDEX-DROPDOWN-LIST-GROUP-HEADER";
    }
    get ariaLabelModeText() {
        if (this.modeMultiSelect) {
            return DropdownList_1.i18nBundle.getText(ARIA_LABEL_DROPDOWN_LIST_MULTISELECTABLE);
        }
        return DropdownList_1.i18nBundle.getText(ARIA_LABEL_DROPDOWN_LIST_SELECTABLE);
    }
    get ariaLabelledBy() {
        return `${this._id}-modeLabel`;
    }
    get modeMultiSelect() {
        return this.mode === DropdownListMode.MultiSelect;
    }
    get holderHeight() {
        return this.height ? this.height : "auto";
    }
};
__decorate([
    property({ defaultValue: "list" })
], DropdownList.prototype, "accessibleRole", void 0);
__decorate([
    property()
], DropdownList.prototype, "accessibleName", void 0);
__decorate([
    property({ type: DropdownListMode, defaultValue: DropdownListMode.SingleSelect })
], DropdownList.prototype, "mode", void 0);
__decorate([
    property({ type: String })
], DropdownList.prototype, "height", void 0);
__decorate([
    slot({ type: HTMLElement, "default": true })
], DropdownList.prototype, "items", void 0);
DropdownList = DropdownList_1 = __decorate([
    customElement({
        tag: "udex-dropdown-list",
        renderer: litRender,
        styles: [DropdownListCss, browserScrollbarCSS],
        template: DropdownListTemplate,
        dependencies: [],
    }),
    event("selection-change", {
        detail: {
            selectedItems: { type: Array },
            item: { type: HTMLElement },
        },
    })
], DropdownList);
DropdownList.define();
export default DropdownList;
//# sourceMappingURL=DropdownList.js.map