var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import Toast from "@ui5/webcomponents/dist/Toast.js";
import "@ui5/webcomponents/dist/Icon.js";
import "@ui5/webcomponents-icons/dist/sys-enter-2.js";
import "@ui5/webcomponents-icons/dist/error.js";
import "@ui5/webcomponents-icons/dist/alert.js";
import ToastTemplate from "./generated/templates/ToastTemplate.lit.js";
// Styles
import ToastCss from "./generated/themes/Toast.css.js";
import redirectAttributes from "./utils/redirectAttributes.js";
var ValueState;
(function (ValueState) {
    ValueState["Action"] = "Action";
    ValueState["Success"] = "Success";
    ValueState["Warning"] = "Warning";
    ValueState["Error"] = "Error";
})(ValueState || (ValueState = {}));
/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 *
 * <h3>Usage</h3>
 *
 * For the <code>udex-toast</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@udex/web-components/dist/Toast.js";</code>
 *
 * @constructor
 * @extends UI5Element
 * @public
 */
let UdexToast = class UdexToast extends UI5Element {
    /**
     * Shows the component.
     * @public
     */
    show() {
        const toastElement = this.getUI5ToastElement();
        if (!toastElement) {
            return;
        }
        toastElement.show();
    }
    get toastClasses() {
        return `udex-toast--${this.valueState.toLowerCase()}`;
    }
    get withIcon() {
        return this.valueState !== ValueState.Action;
    }
    get iconName() {
        switch (this.valueState) {
            case ValueState.Success:
                return "sys-enter-2";
            case ValueState.Error:
                return "error";
            case ValueState.Warning:
                return "alert";
            default:
                return "";
        }
    }
    get iconDesign() {
        switch (this.valueState) {
            case ValueState.Success:
                return "Positive";
            case ValueState.Error:
                return "Negative";
            case ValueState.Warning:
                return "Critical";
            default:
                return "Default";
        }
    }
    closeToast() {
        const toastElement = this.getUI5ToastElement();
        if (!toastElement) {
            return;
        }
        toastElement.open = false;
        this.fireEvent("close");
    }
    getUI5ToastElement() {
        return this.shadowRoot.querySelector("#udex-toast");
    }
    onAfterRendering() {
        redirectAttributes(this, "udex-toast");
    }
};
__decorate([
    slot({ type: Node, "default": true })
], UdexToast.prototype, "text", void 0);
__decorate([
    property({ type: ValueState, defaultValue: ValueState.Action })
], UdexToast.prototype, "valueState", void 0);
__decorate([
    property({ defaultValue: false })
], UdexToast.prototype, "hideCloseIcon", void 0);
UdexToast = __decorate([
    customElement({
        tag: "udex-toast",
        renderer: litRender,
        styles: ToastCss,
        template: ToastTemplate,
        dependencies: [Toast],
    })
    /**
     * Emit when close icon was clicked
     *
     * @public
     */
    ,
    event("close")
], UdexToast);
UdexToast.define();
export default UdexToast;
//# sourceMappingURL=Toast.js.map