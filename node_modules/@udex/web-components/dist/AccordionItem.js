var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import "@ui5/webcomponents/dist/Icon.js";
import "@ui5/webcomponents-icons/dist/AllIcons.js";
import "@ui5/webcomponents-icons/dist/feeder-arrow.js";
import AccordionItemTemplate from "./generated/templates/AccordionItemTemplate.lit.js";
// Styles
import AccordionItemCss from "./generated/themes/AccordionItem.css.js";
/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 *
 * <h3>Usage</h3>
 *
 * For the <code>udex-accordion-item</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @udex/web-components/dist/AccordionItem.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias udex.components.AccordionItem
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-accordion-item
 * @public
 */
let AccordionItem = class AccordionItem extends UI5Element {
    constructor() {
        super();
        /**
         * Used internally to understand the component's open or closed state.
         *
         * @type {Boolean}
         * @name sap.ui.webc.web-components.AccordionItem.prototype.isOpen
         * @defaultvalue false
         * @private
         */
        this.isOpen = false;
        this._el = null;
    }
    itemClickHandler(e) {
        e.preventDefault();
        if (this._el) {
            const isActive = this._el.classList.contains("active");
            this.toggleItemState(this._el, isActive);
        }
    }
    toggleAllHandler(e) {
        e.preventDefault();
        const customEvent = e;
        if (this._el) {
            this.toggleItemState(this._el, customEvent.detail.isOpen);
        }
    }
    toggleItemState(el, isActive) {
        if (isActive) {
            el.classList.remove("active");
            el.querySelector(".udex-accordion-item__header")?.setAttribute("aria-expanded", "false");
        }
        else {
            el.classList.add("active");
            el.querySelector(".udex-accordion-item__header")?.setAttribute("aria-expanded", "true");
        }
    }
    focusHandler() {
        this.fireEvent("accordion-item-focus");
    }
    keydownHandler(e) {
        switch (e.key) {
            case "Enter":
            case " ":
                this.itemClickHandler(e);
                break;
            default:
                break;
        }
    }
    get accordionItemsClass() {
        let classes = "udex-accordion-item";
        if (this._direction === "rtl") {
            classes = `${classes} ${this._direction}`;
        }
        return classes;
    }
    onAfterRendering() {
        this._el = this.shadowRoot?.querySelector(".udex-accordion-item") || null;
        const accordion = this.shadowRoot?.querySelector(".udex-accordion-item") || null;
        if (accordion) {
            const directionStyles = window
                .getComputedStyle(accordion)
                .getPropertyValue("direction");
            if (!directionStyles) {
                this._direction = "ltr";
            }
            else {
                this._direction = directionStyles;
            }
        }
        this?.parentElement?.addEventListener("ui5-toggle-items", this.toggleAllHandler.bind(this));
    }
};
__decorate([
    property({ type: String })
], AccordionItem.prototype, "title", void 0);
__decorate([
    property({ type: Boolean, noAttribute: true })
], AccordionItem.prototype, "isOpen", void 0);
__decorate([
    property({ type: String })
], AccordionItem.prototype, "_direction", void 0);
__decorate([
    slot({ type: Node, "default": true })
], AccordionItem.prototype, "content", void 0);
AccordionItem = __decorate([
    customElement({
        tag: "udex-accordion-item",
        renderer: litRender,
        styles: AccordionItemCss,
        template: AccordionItemTemplate,
        dependencies: [],
    })
    /**
     * Triggered when the user focuses on an accordion item.
     * @public
     */
    ,
    event("accordion-item-focus")
], AccordionItem);
AccordionItem.define();
export default AccordionItem;
//# sourceMappingURL=AccordionItem.js.map