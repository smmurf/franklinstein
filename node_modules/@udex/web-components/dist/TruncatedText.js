var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TruncatedText_1;
import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import Integer from "@ui5/webcomponents-base/dist/types/Integer.js";
import { getI18nBundle } from "@ui5/webcomponents-base/dist/i18nBundle.js";
import { READ_LESS, READ_MORE } from "./generated/i18n/i18n-defaults.js";
// Template
import TruncatedTextTemplate from "./generated/templates/TruncatedTextTemplate.lit.js";
// Styles
import TruncatedTextCss from "./generated/themes/TruncatedText.css.js";
var ErrorVariableName;
(function (ErrorVariableName) {
    ErrorVariableName["charLimit"] = "char-limit";
})(ErrorVariableName || (ErrorVariableName = {}));
const ellipsisSymbols = "...";
const lineEndRegExp = new RegExp(/($)|([,.]+)$|([,.]+)?\s+(\S*)$/);
/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * The <code> udex-truncated-text </code> component is a component used to limit and toggle text visibility.
 *
 * @constructor
 * @alias udex.components.TruncatedText
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-truncated-text
 * @public
 */
let TruncatedText = TruncatedText_1 = class TruncatedText extends UI5Element {
    constructor() {
        super();
    }
    static async onDefine() {
        TruncatedText_1.i18nBundle = await getI18nBundle("sap-ui-webcomponents-bundle");
    }
    get visibleText() {
        return this.initiallyExpanded ? `${this.text} ` : this.truncatedText;
    }
    get truncatedText() {
        return this.text.substring(0, this.cropAfter()).replace(lineEndRegExp, ellipsisSymbols);
    }
    get buttonLabel() {
        return this.initiallyExpanded
            ? TruncatedText_1.i18nBundle.getText(READ_LESS)
            : TruncatedText_1.i18nBundle.getText(READ_MORE);
    }
    get validatedCharLimit() {
        return (Number(this.charLimit) < 0) ? 0 : this.charLimit;
    }
    onBeforeRendering() {
        this.validateVariables(ErrorVariableName.charLimit, Number(this.charLimit));
    }
    cropAfter() {
        return this.text.substring(0, Number(this.validatedCharLimit)).trim().length;
    }
    validateVariables(name, value) {
        if (value < 0) {
            console.warn(`The variable ${name} cannot take a negative value`);
        }
    }
    onToggleClick() {
        this.initiallyExpanded = !this.initiallyExpanded;
    }
};
__decorate([
    property({ type: Boolean })
], TruncatedText.prototype, "initiallyExpanded", void 0);
__decorate([
    property({ type: String })
], TruncatedText.prototype, "_direction", void 0);
__decorate([
    property({ type: String })
], TruncatedText.prototype, "text", void 0);
__decorate([
    property({ defaultValue: 150, type: Integer })
], TruncatedText.prototype, "charLimit", void 0);
TruncatedText = TruncatedText_1 = __decorate([
    customElement({
        tag: "udex-truncated-text",
        renderer: litRender,
        styles: TruncatedTextCss,
        template: TruncatedTextTemplate,
    })
], TruncatedText);
TruncatedText.define();
export default TruncatedText;
//# sourceMappingURL=TruncatedText.js.map