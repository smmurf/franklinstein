import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import type I18nBundle from "@ui5/webcomponents-base/dist/i18nBundle.js";
import "@ui5/webcomponents-icons/dist/favorite.js";
import "@ui5/webcomponents-icons/dist/unfavorite.js";
type Star = {
    selected: boolean;
    index: number;
    halfStar: boolean;
};
declare enum DisplayType {
    Desktop = "Desktop",
    Mobile = "Mobile"
}
/**
 * @class
 *
 * ### Overview
 *
 * ### ES6 Module Import
 *
 * `import "@ui5/webcomponents/dist/RatingIndicator.js";`
 * @constructor
 * @extends UI5Element
 * @public
 */
declare class RatingIndicator extends UI5Element {
    /**
     * The indicated value of the rating.
     *
     * **Note:** If you set a number which is not round, it would be shown as follows:
     *
     * - 1.0 - 1.2 -> 1
     * - 1.3 - 1.7 -> 1.5
     * - 1.8 - 1.9 -> 2
     * @default 0
     * @public
     */
    value: number;
    /**
     * The number of displayed rating symbols.
     * @default 5
     * @public
     */
    max: number;
    /**
     * Defines whether the component is disabled.
     *
     * **Note:** A disabled component is completely noninteractive.
     * @default false
     * @public
     */
    disabled: boolean;
    /**
     * Defines whether the component is read-only.
     *
     * **Note:** A read-only component is not editable,
     * but still provides visual feedback upon user interaction.
     * @default false
     * @public
     */
    readonly: boolean;
    /**
     * Defines the accessible ARIA name of the component.
     * @default ""
     * @public
     */
    accessibleName: string;
    /**
     * Receives id(or many ids) of the elements that label the component.
     * @default ""
     * @public
     */
    accessibleNameRef: string;
    /**
    * Defines whether the component is required.
    * @default false
    * @public
    */
    required: boolean;
    /**
     * Defines the tooltip of the component.
     * @default ""
     * @public
     */
    tooltip: string;
    /**
     * Defines the display type of the component.
     *
     * @default DisplayType.Desktop
     * @public
     */
    display: DisplayType;
    /**
      * The number of total votes.
      *
      * @public
      */
    totalCount: number;
    /**
     * @private
     */
    _stars: Array<Star>;
    /**
     * @private
     */
    _focused: boolean;
    _liveValue?: number;
    static i18nBundle: I18nBundle;
    static onDefine(): Promise<void>;
    constructor();
    onBeforeRendering(): void;
    calcState(): void;
    _onclick(e: MouseEvent): void;
    _onkeydown(e: KeyboardEvent): void;
    _onfocusin(): void;
    _onfocusout(): void;
    get effectiveTabIndex(): string;
    get ratingTooltip(): string;
    get defaultTooltip(): string;
    get _ariaRoleDescription(): string;
    get _ariaDisabled(): true | undefined;
    get _ariaLabel(): string | undefined;
    get _ariaDescription(): string | undefined;
    get ariaReadonly(): "true" | undefined;
    get classNames(): string;
}
export default RatingIndicator;
