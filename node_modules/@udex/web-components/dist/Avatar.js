var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import "@ui5/webcomponents/dist/Avatar.js";
// Template
import AvatarTemplate from "./generated/templates/AvatarTemplate.lit.js";
// Styles
import AvatarCss from "./generated/themes/Avatar.css";
var AvatarColorScheme;
(function (AvatarColorScheme) {
    AvatarColorScheme["Mango"] = "Mango";
    AvatarColorScheme["Red"] = "Red";
    AvatarColorScheme["Raspberry"] = "Raspberry";
    AvatarColorScheme["Pink"] = "Pink";
    AvatarColorScheme["Indigo"] = "Indigo";
    AvatarColorScheme["Blue"] = "Blue";
    AvatarColorScheme["Teal"] = "Teal";
    AvatarColorScheme["Green"] = "Green";
    AvatarColorScheme["Grey"] = "Grey";
    AvatarColorScheme["Transparent"] = "Transparent";
    AvatarColorScheme["Neutral"] = "Neutral";
})(AvatarColorScheme || (AvatarColorScheme = {}));
var AvatarShape;
(function (AvatarShape) {
    AvatarShape["Circle"] = "Circle";
    AvatarShape["Square"] = "Square";
})(AvatarShape || (AvatarShape = {}));
var AvatarSize;
(function (AvatarSize) {
    AvatarSize["XS"] = "XS";
    AvatarSize["S"] = "S";
    AvatarSize["M"] = "M";
    AvatarSize["L"] = "L";
    AvatarSize["XL"] = "XL";
})(AvatarSize || (AvatarSize = {}));
const udexToUi5ColorSchemeMap = {
    Mango: "Accent1",
    Red: "Accent2",
    Raspberry: "Accent3",
    Pink: "Accent4",
    Indigo: "Accent5",
    Blue: "Accent6",
    Teal: "Accent7",
    Green: "Accent8",
    Grey: "Accent10",
    Transparent: "Accent6",
    Neutral: "Accent6",
};
let Avatar = class Avatar extends UI5Element {
    get getUI5AvatarColorScheme() {
        return udexToUi5ColorSchemeMap[this.colorScheme];
    }
    get imageSlot() {
        return !!this.image.length;
    }
    get badgeSlot() {
        return !!this.badge.length;
    }
    get udexAvatarClass() {
        let avatarClass = "udex-avatar";
        if (this.image) {
            avatarClass += " udex-avatar--with-image";
        }
        return avatarClass;
    }
};
__decorate([
    property({ type: String, defaultValue: "" })
], Avatar.prototype, "initials", void 0);
__decorate([
    property({ type: Boolean, defaultValue: false })
], Avatar.prototype, "interactive", void 0);
__decorate([
    property({ type: String, defaultValue: "" })
], Avatar.prototype, "accessibleName", void 0);
__decorate([
    property({ type: AvatarColorScheme, defaultValue: AvatarColorScheme.Blue })
], Avatar.prototype, "colorScheme", void 0);
__decorate([
    property({ type: Boolean, defaultValue: false })
], Avatar.prototype, "disabled", void 0);
__decorate([
    property({ type: String, defaultValue: "" })
], Avatar.prototype, "fallbackIcon", void 0);
__decorate([
    property({ type: String, defaultValue: "" })
], Avatar.prototype, "icon", void 0);
__decorate([
    property({ type: AvatarShape, defaultValue: AvatarShape.Circle })
], Avatar.prototype, "shape", void 0);
__decorate([
    property({ type: AvatarSize, defaultValue: AvatarSize.S })
], Avatar.prototype, "size", void 0);
__decorate([
    slot({ type: HTMLElement, "default": true })
], Avatar.prototype, "image", void 0);
__decorate([
    slot({ type: HTMLElement })
], Avatar.prototype, "badge", void 0);
Avatar = __decorate([
    customElement({
        tag: "udex-avatar",
        renderer: litRender,
        styles: AvatarCss,
        template: AvatarTemplate,
    })
], Avatar);
Avatar.define();
export default Avatar;
//# sourceMappingURL=Avatar.js.map