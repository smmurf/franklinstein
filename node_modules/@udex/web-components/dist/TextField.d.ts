import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
/**
 * @class
 *
 * @constructor
 * @alias udex.components.TextField
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-text-field
 * @public
 */
declare class TextField extends UI5Element {
    _labelActiveClassName: string;
    /**
     * Defines whether the component is in disabled state.
     * <br><br>
     * <b>Note:</b> A disabled component is completely noninteractive.
     *
     * @type {boolean}
     * @name sap.ui.webc.udex.TextField.prototype.disabled
     * @defaultvalue false
     * @public
     */
    disabled: boolean;
    /**
     * Defines the value of the component.
     * <br><br>
     * <b>Note:</b> The property is updated upon typing.
     *
     * @type {string}
     * @name sap.ui.webc.udex.TextField.prototype.value
     * @defaultvalue ""
     * @formEvents input
     * @formProperty
     * @public
     */
    value: string;
    /**
     * Sets the maximum number of characters available in the input field.
     * <br><br>
     * <b>Note:</b> This property is not compatible with the ui5-input type InputType.Number. If the ui5-input type is set to Number, the maxlength value is ignored.
     * @type {sap.ui.webc.base.types.Integer}
     * @name sap.ui.webc.udex.TextField.prototype.maxlength
     * @public
     */
    maxlength?: number;
    /**
     * Defines label text for the input field.
     *
     * @type {string}
     * @name sap.ui.webc.udex.TextField.prototype.label
     * @defaultvalue ""
     * @public
     */
    label: string;
    /**
     * Defines whether the component is read-only.
     * <br><br>
     * <b>Note:</b> A read-only component is not editable,
     * but still provides visual feedback upon user interaction.
     *
     * @type {boolean}
     * @name sap.ui.webc.udex.TextField.prototype.readonly
     * @defaultvalue false
     * @public
     */
    readonly: boolean;
    /**
     * Defines whether the component is display-only.
     * <br><br>
     * <b>Note:</b> A display-only component is not editable,
     * but still provides visual feedback upon user interaction, input border is not visible.
     *
     * @type {boolean}
     * @name sap.ui.webc.udex.TextField.prototype.displayonly
     * @defaultvalue false
     * @public
     */
    displayonly: boolean;
    /**
     * Defines whether the component is required.
     *
     * @type {boolean}
     * @name sap.ui.webc.udex.TextField.prototype.required
     * @defaultvalue false
     * @public
     */
    required: boolean;
    /**
     * Defines the value state of the component.
     *
     * @type {string}
     * @name sap.ui.webc.udex.TextField.prototype.valueState
     * @defaultvalue "Standard"
     * @public
     */
    valueState: "Standard" | "Warning" | "Error" | "Success";
    /**
     * Defines direction of the input.
     *
     * @type {string}
     * @name sap.ui.webc.udex.TextField.prototype.direction
     * @defaultvalue "left"
     * @public
     */
    direction?: "left" | "right";
    /**
     * Defines supporting text under the input field.
     *
     * @type {string}
     * @name sap.ui.webc.udex.TextField.prototype.supportingText
     * @defaultvalue ""
     * @public
     */
    supportingText: string;
    /**
     * Defines the inner stored class of the label.
     *
     * @type {string}
     * @defaultvalue ""
     * @private
     */
    labelActiveClass: string;
    /**
     * Defines the inner stored value of the dir attribute of the input.
     *
     * @type {string}
     * @defaultvalue "ltr"
     * @private
     */
    dirValue: string;
    /**
     * Defines the inner stored value of the readonly attribute of the input.
     *
     * @type {boolean}
     * @defaultvalue false
     * @private
     */
    isInputReadonly: boolean;
    /**
     * Defines the inner stored value of the classes of the label.
     *
     * @type {string}
     * @defaultvalue ""
     * @private
     */
    labelClasses: string;
    handleInput: (event: InputEvent) => void;
    handleFocus: () => void;
    handleBlur: () => void;
    handleKeyDown: (event: KeyboardEvent) => void;
    onBeforeRendering(): void;
}
export default TextField;
