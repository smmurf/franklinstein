import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import type { StyleData } from "@ui5/webcomponents-base/dist/types.js";
import ResponsivePopover from "@ui5/webcomponents/dist/ResponsivePopover.js";
import Tab, { ITab } from "./Tab.js";
import "@ui5/webcomponents/dist/Icon.js";
import "@ui5/webcomponents-icons/dist/navigation-down-arrow.js";
/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 * <h3>Usage</h3>
 *
 * For the <code>udex-tab-navigation</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @udex/web-components/dist/TabNavigation.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webc.web-components.TabNavigation
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-tab-navigation
 * @public
 */
declare class TabNavigation extends UI5Element {
    /**
     * Defines the size of the "More" button.
     * @name udex.components.TabNavigation.prototype.sizeMoreButton
     * @public
     * @type { SizeMoreButton }
     * @defaultValue: "Small"
    */
    sizeMoreButton: "Small" | "Medium";
    /**
     * Defines the mode of the component.
     * @name udex.components.TabNavigation.prototype.mode
     * @public
     * @type { Mode }
     * @defaultValue "Light"
     */
    mode: "Light" | "Dark";
    /**
     * Defines the background color of the component.
     * @name udex.components.TabNavigation.prototype.iconWithoutBackground
     * @public
     * @type { boolean }
     * @defaultValue "false"
     */
    iconWithoutBackground: boolean;
    /**
     * Defines selected tab.
     * @private
     * @type { Object }
     */
    _selectedTab: Tab;
    /**
     * Defines the width of component.
     * @private
     * @type { sap.ui.webc.base.type.Integer }
     */
    _width?: number;
    /**
     * Defines the overflow items.
     * @private
     * @type { Object }
     */
    _overflowItems: Array<ITab>;
    /**
     * Defines the tabs and content.
     * @type { HTMLElement[] }
     * @name sap.ui.webc.base.TabNavigation.prototype.default
     * @slot items
     * @public
     */
    items: Array<ITab>;
    static i18nBundle: any;
    _handleResizeBound: () => void;
    _responsivePopover?: ResponsivePopover;
    _visibleTabs?: Array<ITab | HTMLElement>;
    _isExpanded: boolean;
    constructor();
    static onDefine(): Promise<void>;
    onEnterDOM(): void;
    onExitDOM(): void;
    _handleResize(): void;
    emitClickEvent(pageIndex: number): void;
    onBeforeRendering(): void;
    setSelectedTab(): void;
    resetSelectedTabs(): void;
    setCurrentSelectedTab(): void;
    setRealTabToItems(): void;
    setElementInHeader(): void;
    onAfterRendering(): void;
    initOutsideClick(): void;
    handleOutsideClick(): void;
    onTabClick(e: Event): void;
    getTab(el: HTMLElement | null): false | Tab;
    updateSelectedTab(selectedTabIndex: number): void;
    setItemsInHeader(): void;
    getTabHeader(): HTMLElement;
    removeHiddenAttributeInAllTabs(itemsDomRefs: Array<ITab>): void;
    getTotalItemsWidth(itemsDomRefs: Array<ITab>): number;
    getItemWidth(itemDomRef: HTMLElement): number;
    hideLastVisibleTab(itemsDomRefs: Array<ITab>): void;
    getRootTab(tab: Tab): Tab;
    getSelectedItemWidth(itemsDomRefs: Array<ITab>, selectedTabDomRef: ITab): number;
    findLastVisibleItem(itemsDomRefs: Array<ITab>, containerWidth: number, selectedItemWidth: number, startIndex?: number): number;
    hideInappropriateTabs(lastVisibleTabIndex: number, itemsDomRefs: Array<ITab>): void;
    setVisibleTabs(): void;
    applyTabIndex(): void;
    setTabsIndex(currentIndex: number): void;
    handleOverflowItemClick(e: Event): void;
    onItemSelect(selectedId: string): void;
    getMoreButton(): HTMLElement;
    getHeader(): HTMLElement;
    handleMoreButton(): Promise<void>;
    updateOverflowItems(): void;
    handleTogglePopover(): void;
    handleClosePopover(): void;
    handleOpenPopover(): Promise<void>;
    handleKeyDown(e: KeyboardEvent): void;
    handleRightArrow(e: KeyboardEvent): void;
    onFocusRightItem(target: HTMLElement): void;
    getTabIndexById(id: string): number;
    handleLeftArrow(e: KeyboardEvent): void;
    onFocusLeftItem(target: HTMLElement): void;
    handleTabNext(e: KeyboardEvent): void;
    onTabNext(e: KeyboardEvent, previousSelectedIndex: number): void;
    handleTabPrevious(e: KeyboardEvent): void;
    onTabPrevious(e: KeyboardEvent, previousSelectedIndex: number): void;
    handleHomeKey(e: KeyboardEvent): void;
    handleEndKey(e: KeyboardEvent): void;
    onEndKey(): void;
    handleFocusMoreButton(e: KeyboardEvent): Promise<void>;
    handleUpMoreButton(e: KeyboardEvent): Promise<void>;
    onFocusLastItemPopover(): Promise<void>;
    handleTabPreviouMoreButton(e: KeyboardEvent): void;
    handleHomeKeyMoreButton(e: KeyboardEvent): void;
    handleEnterKeyMoreButton(e: KeyboardEvent): Promise<void>;
    onOpenPopover(): void;
    handleDownMoreButton(e: KeyboardEvent): Promise<void>;
    onFocusFirstItemPopover(): Promise<void>;
    handleFocusPopover(e: KeyboardEvent): void;
    handleUp(e: KeyboardEvent): void;
    onPreviousItemInPopover(target: HTMLElement): Promise<void>;
    getItemsFromPopover(): Promise<HTMLElement[]>;
    getPopoverTabIndexById(popoverItems: Array<HTMLElement>, id: string): number;
    handleDown(e: KeyboardEvent): void;
    onNextItemInPopover(target: HTMLElement): Promise<void>;
    handleEnterOrSpace(e: KeyboardEvent): void;
    handleEscape(e: KeyboardEvent): void;
    handleHome(e: KeyboardEvent): Promise<void>;
    handleEnd(e: KeyboardEvent): Promise<void>;
    getResponsePopover(): Promise<ResponsivePopover>;
    get moreButtonText(): string;
    static registerStaticAreaTabStyles(styles: StyleData): void;
}
export default TabNavigation;
