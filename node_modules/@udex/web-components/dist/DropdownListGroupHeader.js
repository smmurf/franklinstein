var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import { isEnter, isSpace } from "@ui5/webcomponents-base/dist/Keys.js";
import { DropdownListMode } from "./DropdownList.js";
import DropdownListGroupHeaderTemplate from "./generated/templates/DropdownListGroupHeaderTemplate.lit.js";
// Styles
import DropdownListGroupHeaderCss from "./generated/themes/DropdownListGroupHeader.css.js";
/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 *
 * <h3>Usage</h3>
 *
 * For the <code>udex-dropdown-list-group-header</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @udex/web-components/dist/DropdownListGroupHeader.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webc.web-components.DropdownListGroupHeader
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-dropdown-list-group-header
 * @public
 */
let DropdownListGroupHeader = class DropdownListGroupHeader extends UI5Element {
    onBeforeRendering() {
        this.prepareListItems();
    }
    handleHeaderPress(e) {
        const headerItem = this.getHeaderItem();
        const isAllSelected = this.checkSelection(true);
        const isAllDeselected = this.checkSelection(false);
        if (isAllDeselected || headerItem.indeterminate) {
            this.toggleAllItems(true);
            this.activateHeader();
        }
        if (isAllSelected) {
            this.toggleAllItems(false);
            this.deactivateHeader();
        }
        this.fireHeaderPress(e);
    }
    handleGroupItemsClick() {
        const isAllSelected = this.checkSelection(true);
        const isAllDeselected = this.checkSelection(false);
        if (isAllDeselected) {
            this.deactivateHeader();
            return;
        }
        if (isAllSelected) {
            this.activateHeader();
            return;
        }
        this.activateHeaderIndeterminate();
    }
    handleKeyDown(e) {
        if (isSpace(e) || isEnter(e)) {
            this.handleHeaderPress(e);
        }
        if (isEnter(e)) {
            this.fireHeaderPress(e);
        }
    }
    activateHeaderIndeterminate() {
        const headerItem = this.getHeaderItem();
        headerItem.selected = true;
        headerItem.indeterminate = true;
    }
    activateHeader() {
        const headerItem = this.getHeaderItem();
        headerItem.selected = true;
        headerItem.indeterminate = false;
    }
    deactivateHeader() {
        const headerItem = this.getHeaderItem();
        headerItem.selected = false;
        headerItem.indeterminate = false;
    }
    toggleAllItems(select) {
        const items = this.filterDisabledItems();
        items.forEach(item => {
            item.selected = select;
        });
    }
    checkSelection(selected) {
        const items = this.filterDisabledItems();
        return items.every(item => item.selected === selected);
    }
    filterDisabledItems() {
        return this.getItems().filter(({ disabled }) => !disabled);
    }
    fireHeaderPress(e) {
        if (isEnter(e)) {
            e.preventDefault();
        }
        this.fireEvent("header-press");
    }
    getItems() {
        return this.getSlottedNodes("items");
    }
    getHeaderItem() {
        return this.shadowRoot.querySelector(".udex-dropdown-list__group-header");
    }
    prepareListItems() {
        const items = this.getItems();
        const className = "udex-dropdown-list__item";
        items.forEach(item => {
            const child = item.shadowRoot?.querySelector(`.${className}`);
            child?.classList.add(`${className}_group`);
        });
    }
    getHandleGroupItemsClick() {
        return this.modeMultiSelect ? this.handleGroupItemsClick() : undefined;
    }
    get modeMultiSelect() {
        return this.mode === DropdownListMode.MultiSelect;
    }
};
__decorate([
    property()
], DropdownListGroupHeader.prototype, "label", void 0);
__decorate([
    property()
], DropdownListGroupHeader.prototype, "supportingText", void 0);
__decorate([
    property({ type: DropdownListMode, defaultValue: DropdownListMode.SingleSelect })
], DropdownListGroupHeader.prototype, "mode", void 0);
__decorate([
    slot({ type: HTMLElement, "default": true })
], DropdownListGroupHeader.prototype, "items", void 0);
DropdownListGroupHeader = __decorate([
    customElement({
        tag: "udex-dropdown-list-group-header",
        renderer: litRender,
        styles: DropdownListGroupHeaderCss,
        template: DropdownListGroupHeaderTemplate,
        dependencies: [],
    })
], DropdownListGroupHeader);
DropdownListGroupHeader.define();
export default DropdownListGroupHeader;
//# sourceMappingURL=DropdownListGroupHeader.js.map