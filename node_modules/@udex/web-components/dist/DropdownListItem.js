var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import CheckBox from "@ui5/webcomponents/dist/CheckBox.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import { isEnter, isSpace } from "@ui5/webcomponents-base/dist/Keys.js";
import { DropdownListMode } from "./DropdownList.js";
import DropdownListItemTemplate from "./generated/templates/DropdownListItemTemplate.lit.js";
// Styles
import DropdownListItemCss from "./generated/themes/DropdownListItem.css.js";
/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 *
 * <h3>Usage</h3>
 *
 * For the <code>udex-dropdown-list-item</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @udex/web-components/dist/DropdownListItem.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webc.web-components.DropdownListItem
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-dropdown-list-item
 * @public
 */
let DropdownListItem = class DropdownListItem extends UI5Element {
    constructor() {
        super();
        this.deactivate = () => {
            if (this.active) {
                this.active = false;
            }
        };
    }
    onEnterDOM() {
        document.addEventListener("mouseup", this.deactivate);
    }
    onExitDOM() {
        document.removeEventListener("mouseup", this.deactivate);
    }
    handleMouseDown() {
        this.activate();
    }
    handleMouseUp() {
        this.deactivate();
    }
    handleKeyUp(e) {
        e.preventDefault();
        if (isSpace(e) || isEnter(e)) {
            this.deactivate();
        }
    }
    handleKeyDown(e) {
        if (isSpace(e) || isEnter(e)) {
            this.activate();
            this.handleItemClick(e);
        }
    }
    handleItemClick(e) {
        if (this.disabled) {
            return;
        }
        this.selected = !this.selected;
        this.fireItemPress(e);
    }
    handleFocusIn() {
        if (this.disabled) {
            return;
        }
        this.focused = true;
        this.fireEvent("item-focus");
    }
    handleFocusOut() {
        if (this.disabled) {
            return;
        }
        this.focused = false;
        this.deactivate();
    }
    fireItemPress(e) {
        if (isEnter(e)) {
            e.preventDefault();
        }
        this.fireEvent("item-press");
    }
    activate() {
        if (!this.disabled) {
            this.active = true;
        }
    }
    getItems() {
        return this.getSlottedNodes("items");
    }
    get modeMultiSelect() {
        return this.mode === DropdownListMode.MultiSelect;
    }
    get roleItem() {
        return this._role.length > 0 ? this._role : "listitem";
    }
    get _ariaDisabled() {
        return this.disabled ? true : undefined;
    }
    get _tabIndex() {
        if (this.disabled) {
            return -1;
        }
        return 0;
    }
};
__decorate([
    property({ type: Boolean })
], DropdownListItem.prototype, "disabled", void 0);
__decorate([
    property()
], DropdownListItem.prototype, "supportingText", void 0);
__decorate([
    property({ type: Boolean })
], DropdownListItem.prototype, "active", void 0);
__decorate([
    property({ type: Boolean })
], DropdownListItem.prototype, "focused", void 0);
__decorate([
    property({ type: Boolean })
], DropdownListItem.prototype, "selected", void 0);
__decorate([
    property({ type: DropdownListMode, defaultValue: DropdownListMode.SingleSelect })
], DropdownListItem.prototype, "mode", void 0);
__decorate([
    property({ type: Boolean })
], DropdownListItem.prototype, "endSection", void 0);
__decorate([
    property({ type: Boolean })
], DropdownListItem.prototype, "indeterminate", void 0);
__decorate([
    slot({ type: Node, "default": true })
], DropdownListItem.prototype, "content", void 0);
__decorate([
    property({ type: String })
], DropdownListItem.prototype, "_role", void 0);
DropdownListItem = __decorate([
    customElement({
        tag: "udex-dropdown-list-item",
        renderer: litRender,
        styles: DropdownListItemCss,
        template: DropdownListItemTemplate,
        dependencies: [CheckBox],
    })
    /**
     * Fired event when the user click on a dropdown list item.
     *
     * @event sap.ui.webc.web-components.DropdownListItem#itemFocus
     * @public
     */
    ,
    event("item-focus")
    /**
     * Fired event when the user focuses on a dropdown list item.
     *
     * @event sap.ui.webc.web-components.DropdownListItem#itemClick
     * @public
     */
    ,
    event("item-press")
], DropdownListItem);
DropdownListItem.define();
export default DropdownListItem;
//# sourceMappingURL=DropdownListItem.js.map