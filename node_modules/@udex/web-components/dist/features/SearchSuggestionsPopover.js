import { registerFeature } from "@ui5/webcomponents-base/dist/FeaturesRegistry.js";
import Button from "@ui5/webcomponents/dist/Button.js";
import Popover from "@ui5/webcomponents/dist/Popover.js";
/**
 * A class to manage the <code>Search</code suggestion items.
 *
 * @class
 * @private
 * @author SAP SE
 */
class Suggestion {
    constructor(component) {
        this.component = component;
        this._getSuggestionPopover();
        this.selectedItemIndex = -1;
    }
    _getComponent() {
        return this.component;
    }
    async _getSuggestionPopover() {
        if (this.popover) {
            return this.popover;
        }
        const staticAreaItem = await this._getComponent().getStaticAreaItemDomRef();
        this.popover = staticAreaItem.querySelector("[ui5-popover]");
        return this.popover;
    }
    _getItems() {
        return this.popover ? [...this.popover?.querySelectorAll("[ui5-button]")] : [];
    }
    open() {
        this._getComponent().open = true;
        this.popover.showAt(this._getComponent());
    }
    close() {
        this._getComponent().open = false;
        this.popover?.close(true);
        this.selectedItemIndex = -1;
    }
    onFocusInput() {
        this.component.shadowRoot?.querySelector("input")?.focus();
        this.selectedItemIndex = -1;
    }
    onEnter(e) {
        e.preventDefault();
        if (this.selectedItemIndex >= 0) {
            this.component.value = this._getItems()[this.selectedItemIndex].getAttribute("title")?.replace(/<[^>]*>?/gm, "");
        }
    }
    onTab(e) {
        this.onDown(e);
    }
    onTabPrevious(e) {
        this.onUp(e);
    }
    onUp(e) {
        e.preventDefault();
        if (this._getItems().length) {
            const itemCount = this._getItems().length - 1;
            const previousSelectedIdx = this.selectedItemIndex;
            if (previousSelectedIdx === -1) {
                this._getItems()[itemCount].focus();
                this.selectedItemIndex = itemCount;
                return true;
            }
            if (previousSelectedIdx > 0 && previousSelectedIdx <= itemCount) {
                this._getItems()[previousSelectedIdx - 1].focus();
                this.selectedItemIndex = previousSelectedIdx - 1;
                return true;
            }
            if (previousSelectedIdx === 0) {
                this.onFocusInput();
                return true;
            }
        }
    }
    onDown(e) {
        e.preventDefault();
        if (this._getItems().length) {
            const itemCount = this._getItems().length - 1;
            const nextSelectedIdx = this.selectedItemIndex;
            if (nextSelectedIdx === -1) {
                this._getItems()[0].focus();
                this.selectedItemIndex = 0;
                return true;
            }
            if (nextSelectedIdx >= 0 && nextSelectedIdx !== itemCount) {
                this._getItems()[nextSelectedIdx + 1].focus();
                this.selectedItemIndex = nextSelectedIdx + 1;
                return true;
            }
            if (nextSelectedIdx === itemCount) {
                this.onFocusInput();
                return true;
            }
        }
    }
    onRight() {
        this.onFocusInput();
    }
    onLeft() {
        this.onFocusInput();
    }
    onEscape(e) {
        e.preventDefault();
        this.close();
    }
    static get dependencies() {
        return [
            Popover,
            Button,
        ];
    }
}
registerFeature("SearchInputSuggestion", Suggestion);
export default Suggestion;
//# sourceMappingURL=SearchSuggestionsPopover.js.map