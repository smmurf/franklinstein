import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import { isSpace } from "@ui5/webcomponents-base/dist/Keys.js";

import TileTemplate from "./generated/templates/TileTemplate.lit.js";

// Styles
import TileCss from "./generated/themes/Tile.css.js";

type AnchorNode = HTMLAnchorElement | undefined | null;

/**
 * @class
 *
 * @constructor
 * @alias udex.components.Tile
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-tile
 * @public
 */
@customElement({
  tag: "udex-tile",
  renderer: litRender,
  styles: TileCss,
  template: TileTemplate,
})
class Tile extends UI5Element {
  /**
   * Defines display the shadow for the Tile.
   *
   * @type {string}
   * @name udex.components.Tile.prototype.hideShadow
   * @public
   */
  @property({ type: Boolean })
  hideShadow!: boolean;

  /**
   * Defines if the component would be interactive,
   * e.g. gets hover effect, gets focus outline and <code>click</code> event is fired, when pressed.
   * @default false
   * @public
   */
  @property({ type: Boolean })
  interactive!: boolean;

  /**
   * Defines the component href.
   *
   * <b>This property must only be used when the <code>interactive</code> property is set.</b>
   *
   * @type {string}
   * @name udex.components.Tile.prototype.href
   * <br><br>
   * <b>Note:</b> Standard hyperlink behavior is supported.
   * @public
   */
  @property({ type: String })
  href!: string;

  /**
   * Defines the component target.
   * <br><br>
   * <b>Notes:</b>
   *
   * <ul>
   * <li><code>_self</code></li>
   * <li><code>_top</code></li>
   * <li><code>_blank</code></li>
   * <li><code>_parent</code></li>
   * <li><code>_search</code></li>
   * </ul>
   *
   * <b>This property must only be used when the <code>interactive</code> property is set.</b>
   *
   * @type {string}
   * @name udex.components.Tile.prototype.target
   * <br><br>
   * <b>Note:</b> Standard hyperlink behavior is supported.
   * @public
   */
  @property({ type: String })
  target!: string;

  /**
   * Defines the component aria-label accessibility attribute.
   *
   * <b>This property must only be used when the <code>interactive</code> property is set.</b>
   *
   * @type {string}
   * @name udex.components.Tile.prototype.accessibleName
   * @public
   */
  @property({ type: String })
  accessibleName!: string;

  /**
   * Defines the content of the component.
   *
   * @type {Node}
   * @name udex.components.Tile.prototype.default
   * @slot
   * @public
   */
  @slot({ type: Node }) default!: Node;

  _onkeydown(e: KeyboardEvent) {
    if (isSpace(e)) {
      const component: AnchorNode = this.shadowRoot?.querySelector("a.udex-tile");

      if (component) {
        e.preventDefault(); // prevent scrolling
        component.click();
      }
    }
  }
}

Tile.define();

export default Tile;
