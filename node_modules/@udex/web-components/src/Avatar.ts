import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import "@ui5/webcomponents/dist/Avatar.js";

// Template
import AvatarTemplate from "./generated/templates/AvatarTemplate.lit.js";

// Styles
import AvatarCss from "./generated/themes/Avatar.css";

enum AvatarColorScheme {
  Mango = "Mango",
  Red = "Red",
  Raspberry = "Raspberry",
  Pink = "Pink",
  Indigo = "Indigo",
  Blue = "Blue",
  Teal = "Teal",
  Green = "Green",
  Grey = "Grey",
  Transparent = "Transparent",
  Neutral = "Neutral",
}

enum AvatarShape {
  Circle = "Circle",
  Square = "Square",
}

enum AvatarSize {
  XS = "XS",
  S = "S",
  M = "M",
  L = "L",
  XL = "XL",
}

const udexToUi5ColorSchemeMap = {
  Mango: "Accent1",
  Red: "Accent2",
  Raspberry: "Accent3",
  Pink: "Accent4",
  Indigo: "Accent5",
  Blue: "Accent6",
  Teal: "Accent7",
  Green: "Accent8",
  Grey: "Accent10",
  Transparent: "Accent6",
  Neutral: "Accent6",
};

@customElement({
  tag: "udex-avatar",
  renderer: litRender,
  styles: AvatarCss,
  template: AvatarTemplate,
})
class Avatar extends UI5Element {
  /**
   * Defines the displayed initials.
   * @type {string}
   * @name udex.components.Avatar.prototype.initials
   * @defaultvalue ""
   * @public
   */
  @property({ type: String, defaultValue: "" })
    initials!: string;

  /**
   * Defines if the avatar is interactive (focusable and pressable).
   * @type {boolean}
   * @name udex.components.Avatar.prototype.interactive
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean, defaultValue: false })
    interactive!: boolean;

  /**
   * Defines the text alternative of the component.
   * @type {string}
   * @name udex.components.Avatar.prototype.accessibleName
   * @defaultvalue ""
   * @public
   */
  @property({ type: String, defaultValue: "" })
    accessibleName!: string;

  /**
   * Defines the design of the component.
   *
   * @type {AvatarColorScheme}
   * @name udex.components.Avatar.prototype.colorScheme
   * @defaultvalue "Blue"
   * @public
   */
  @property({ type: AvatarColorScheme, defaultValue: AvatarColorScheme.Blue })
    colorScheme!: AvatarColorScheme;

  /**
   * Defines whether the component is disabled.
   *
   * @type {boolean}
   * @name udex.components.Avatar.prototype.disabled
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean, defaultValue: false })
    disabled!: boolean;

  /**
   * Defines the name of the fallback icon.
   * @type {string}
   * @name udex.components.Avatar.prototype.fallbackIcon
   * @defaultvalue ""
   * @public
   */
  @property({ type: String, defaultValue: "" })
    fallbackIcon!: string;

  /**
   * Defines the name of the UI5 Icon, that will be displayed.
   *
   * @type {string}
   * @name udex.components.Avatar.prototype.icon
   * @defaultvalue ""
   * @public
   */
  @property({ type: String, defaultValue: "" })
    icon!: string;

  /**
   * Defines the shape of the component.
   *
   * @type {AvatarShape}
   * @name udex.components.Avatar.prototype.shape
   * @defaultvalue "Circle"
   * @public
   */
  @property({ type: AvatarShape, defaultValue: AvatarShape.Circle })
    shape!: AvatarShape;

  /**
   * Controls id of the element that label the component
   *
   * @type {AvatarSize}
   * @name udex.components.Avatar.prototype.size
   * @defaultvalue "S"
   * @public
   */
  @property({ type: AvatarSize, defaultValue: AvatarSize.S })
    size!: AvatarSize;

  /**
   * Receives the desired <img> tag
   *
   * @type {HTMLElement[]}
   * @name sap.ui.webc.main.Avatar.prototype.default
   * @slot image
   * @public
   */
  @slot({ type: HTMLElement, "default": true })
    image!: Array<HTMLElement>;

  /**
   * Defines the optional badge that will be used for visual affordance.
   *
   * @type {HTMLElement[]}
   * @name sap.ui.webc.main.Avatar.prototype.badge
   * @slot
   * @public
   */
  @slot({ type: HTMLElement })
    badge!: Array<HTMLElement>;

  get getUI5AvatarColorScheme(): string {
    return udexToUi5ColorSchemeMap[this.colorScheme];
  }

  get imageSlot(): boolean {
    return !!this.image.length;
  }

  get badgeSlot(): boolean {
    return !!this.badge.length;
  }

  get udexAvatarClass(): string {
    let avatarClass = "udex-avatar";

    if (this.image) {
      avatarClass += " udex-avatar--with-image";
    }

    return avatarClass;
  }
}

Avatar.define();

export default Avatar;
