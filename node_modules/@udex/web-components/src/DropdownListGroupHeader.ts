import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import { isEnter, isSpace } from "@ui5/webcomponents-base/dist/Keys.js";
import { DropdownListMode } from "./DropdownList.js";
import DropdownListItem from "./DropdownListItem.js";
import DropdownListGroupHeaderTemplate from "./generated/templates/DropdownListGroupHeaderTemplate.lit.js";

// Styles
import DropdownListGroupHeaderCss from "./generated/themes/DropdownListGroupHeader.css.js";

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 *
 * <h3>Usage</h3>
 *
 * For the <code>udex-dropdown-list-group-header</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @udex/web-components/dist/DropdownListGroupHeader.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webc.web-components.DropdownListGroupHeader
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-dropdown-list-group-header
 * @public
 */
@customElement({
  tag: "udex-dropdown-list-group-header",
  renderer: litRender,
  styles: DropdownListGroupHeaderCss,
  template: DropdownListGroupHeaderTemplate,
  dependencies: [],
})

class DropdownListGroupHeader extends UI5Element {
  /**
   * Defines the title of the GroupHeader item component.
   *
   * @type {string}
   * @name sap.ui.webc.web-components.DropdownListGroupHeader.prototype.title
   * @public
   */
  @property()
  label!: string;

  /**
   * Defines the supportingText, displayed in the end of the item.
   *
   * @type {string}
   * @name sap.ui.webc.web-components.DropdownListGroupHeader.prototype.supportingText
   * @public
   */
  @property()
  supportingText!: string;

  /**
   * Defines the mode of the item.
   *
   * @type {string}
   * @name sap.ui.webc.web-components.DropdownListGroupHeader.prototype.mode
   * @defaultvalue "SingleSelect"
   * @public
   */
  @property({ type: DropdownListMode, defaultValue: DropdownListMode.SingleSelect })
  mode!: `${DropdownListMode}`;

  /**
   * Slot for dropdown list items.
   *
   * @type @type {HTMLElement[]}
   * @name sap.ui.webc.web-components.DropdownListGroupHeader.prototype.default
   * @slot items
   * @public
   */
  @slot({ type: HTMLElement, "default": true })
  items!: Array<HTMLElement>;

  onBeforeRendering() {
    this.prepareListItems();
  }

  handleHeaderPress(e: MouseEvent | KeyboardEvent) {
    const headerItem = this.getHeaderItem();
    const isAllSelected = this.checkSelection(true);
    const isAllDeselected = this.checkSelection(false);

    if (isAllDeselected || headerItem.indeterminate) {
      this.toggleAllItems(true);
      this.activateHeader();
    }

    if (isAllSelected) {
      this.toggleAllItems(false);
      this.deactivateHeader();
    }

    this.fireHeaderPress(e);
  }

  handleGroupItemsClick() {
    const isAllSelected = this.checkSelection(true);
    const isAllDeselected = this.checkSelection(false);

    if (isAllDeselected) {
      this.deactivateHeader();
      return;
    }

    if (isAllSelected) {
      this.activateHeader();
      return;
    }

    this.activateHeaderIndeterminate();
  }

  handleKeyDown(e: KeyboardEvent) {
    if (isSpace(e) || isEnter(e)) {
      this.handleHeaderPress(e);
    }
    if (isEnter(e)) {
      this.fireHeaderPress(e);
    }
  }

  activateHeaderIndeterminate() {
    const headerItem = this.getHeaderItem();
    headerItem.selected = true;
    headerItem.indeterminate = true;
  }

  activateHeader() {
    const headerItem = this.getHeaderItem();
    headerItem.selected = true;
    headerItem.indeterminate = false;
  }

  deactivateHeader() {
    const headerItem = this.getHeaderItem();
    headerItem.selected = false;
    headerItem.indeterminate = false;
  }

  toggleAllItems(select: boolean) {
    const items = this.filterDisabledItems();
    items.forEach(item => {
      item.selected = select;
    });
  }

  checkSelection(selected:boolean) {
    const items = this.filterDisabledItems();
    return items.every(item => item.selected === selected);
  }

  filterDisabledItems() {
    return this.getItems().filter(({ disabled }) => !disabled);
  }

  fireHeaderPress(e: Event) {
    if (isEnter(e as KeyboardEvent)) {
      e.preventDefault();
    }
    this.fireEvent("header-press");
  }

  getItems(): Array<DropdownListItem> {
    return this.getSlottedNodes<DropdownListItem>("items");
  }

  getHeaderItem(): DropdownListItem {
    return this.shadowRoot!.querySelector(".udex-dropdown-list__group-header")!;
  }

  prepareListItems() {
    const items = this.getItems();
    const className = "udex-dropdown-list__item";
    items.forEach(item => {
      const child = item.shadowRoot?.querySelector(`.${className}`);
      child?.classList.add(`${className}_group`);
    });
  }

  getHandleGroupItemsClick() {
    return this.modeMultiSelect ? this.handleGroupItemsClick() : undefined;
  }

  get modeMultiSelect() {
    return this.mode === DropdownListMode.MultiSelect;
  }
}

DropdownListGroupHeader.define();

export default DropdownListGroupHeader;
