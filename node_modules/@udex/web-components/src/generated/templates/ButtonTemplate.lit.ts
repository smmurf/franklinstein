/* eslint no-unused-vars: 0 */
import { html, svg, repeat, classMap, styleMap, ifDefined, unsafeHTML, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import type UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
	import type Button from "../../Button.js";
	import type { ClassMapValue } from "@ui5/webcomponents-base/dist/types.js";
	
function block0 (this: Button, context: UI5Element, tags: string[], suffix: string | undefined) { return suffix ? html`<${scopeTag("ui5-button", tags, suffix)} class="udex-button ${ifDefined(this.sizeClass)}" ?disabled="${this.disabled}" icon="${ifDefined(this.icon)}" ?icon-end="${this.iconEnd}" tooltip="${ifDefined(this.tooltip)}" design="${ifDefined(this.design)}" ?toggled="${this.toggled}" accessible-name="${ifDefined(this.accessibleName)}" accessible-name-ref="${ifDefined(this.accessibleNameRef)}" @click="${this.onButtonClick}">${ this.renderIconOnlyButton ? block1.call(this, context, tags, suffix) : undefined }</${scopeTag("ui5-button", tags, suffix)}>` : html`<ui5-button class="udex-button ${ifDefined(this.sizeClass)}" ?disabled="${this.disabled}" icon="${ifDefined(this.icon)}" ?icon-end="${this.iconEnd}" tooltip="${ifDefined(this.tooltip)}" design="${ifDefined(this.design)}" ?toggled="${this.toggled}" accessible-name="${ifDefined(this.accessibleName)}" accessible-name-ref="${ifDefined(this.accessibleNameRef)}" @click="${this.onButtonClick}">${ this.renderIconOnlyButton ? block1.call(this, context, tags, suffix) : undefined }</ui5-button>`;}
function block1 (this: Button, context: UI5Element, tags: string[], suffix: string | undefined) { return html`<slot></slot>`;}


export default block0;