/* eslint no-unused-vars: 0 */
import { html, svg, repeat, classMap, styleMap, ifDefined, unsafeHTML, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import type UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
	import type DropdownListGroupHeader from "../../DropdownListGroupHeader.js";
	import type { ClassMapValue } from "@ui5/webcomponents-base/dist/types.js";
	
function block0 (this: DropdownListGroupHeader, context: UI5Element, tags: string[], suffix: string | undefined) { return html`<li role="listitem" part="item" class="udex-dropdown-list__group">${ this.modeMultiSelect ? block1.call(this, context, tags, suffix) : block2.call(this, context, tags, suffix) }<ul class="udex-dropdown-list__group-list" @ui5-item-press="${ifDefined(this.getHandleGroupItemsClick)}"><slot></slot></ul></li>`;}
function block1 (this: DropdownListGroupHeader, context: UI5Element, tags: string[], suffix: string | undefined) { return suffix ? html`<${scopeTag("udex-dropdown-list-item", tags, suffix)} _role="group" part="group-item" class="udex-dropdown-list__group-header" tabindex="0" mode="${ifDefined(this.mode)}" supporting-text="${ifDefined(this.supportingText)}" @click="${this.handleHeaderPress}" @keydown="${this.handleKeyDown}"><div class="udex-dropdown-list__header-title">${ifDefined(this.label)}</div></${scopeTag("udex-dropdown-list-item", tags, suffix)}>` : html`<udex-dropdown-list-item _role="group" part="group-item" class="udex-dropdown-list__group-header" tabindex="0" mode="${ifDefined(this.mode)}" supporting-text="${ifDefined(this.supportingText)}" @click="${this.handleHeaderPress}" @keydown="${this.handleKeyDown}"><div class="udex-dropdown-list__header-title">${ifDefined(this.label)}</div></udex-dropdown-list-item>`;}
function block2 (this: DropdownListGroupHeader, context: UI5Element, tags: string[], suffix: string | undefined) { return html`<div class="udex-dropdown-list__header" role="presentation"><span class="udex-dropdown-list__header-title">${ifDefined(this.label)}</span>${ this.supportingText ? block3.call(this, context, tags, suffix) : undefined }</div>`;}
function block3 (this: DropdownListGroupHeader, context: UI5Element, tags: string[], suffix: string | undefined) { return html`<span class="udex-dropdown-list__supporting-text">${ifDefined(this.supportingText)}</span>`;}


export default block0;