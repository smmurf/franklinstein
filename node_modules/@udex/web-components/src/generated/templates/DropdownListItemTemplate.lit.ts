/* eslint no-unused-vars: 0 */
import { html, svg, repeat, classMap, styleMap, ifDefined, unsafeHTML, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import type UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
	import type DropdownListItem from "../../DropdownListItem.js";
	import type { ClassMapValue } from "@ui5/webcomponents-base/dist/types.js";
	
function block0 (this: DropdownListItem, context: UI5Element, tags: string[], suffix: string | undefined) { return html`<li part="item" class="udex-dropdown-list__item" role="${ifDefined(this.roleItem)}" tabindex="${ifDefined(this._tabIndex)}" aria-disabled="${ifDefined(this._ariaDisabled)}" @click="${this.handleItemClick}" @mousedown="${this.handleMouseDown}" @mouseup="${this.handleMouseUp}" @keyup="${this.handleKeyUp}" @keydown="${this.handleKeyDown}" @focusin="${this.handleFocusIn}" @focusout="${this.handleFocusOut}" aria-selected="${ifDefined(this.selected)}" ?end-section="${this.endSection}">${ this.modeMultiSelect ? block1.call(this, context, tags, suffix) : undefined }<div class="udex-dropdown-list__content"><slot part="content"></slot>${ this.supportingText ? block2.call(this, context, tags, suffix) : undefined }</div></li>`;}
function block1 (this: DropdownListItem, context: UI5Element, tags: string[], suffix: string | undefined) { return suffix ? html`<${scopeTag("ui5-checkbox", tags, suffix)} part="checkbox" tabindex="-1" aria-checked="${ifDefined(this.selected)}" ?indeterminate=${this.indeterminate} accessible-name="checkbox" ?checked="${this.selected}" ?disabled="${this.disabled}"></${scopeTag("ui5-checkbox", tags, suffix)}>` : html`<ui5-checkbox part="checkbox" tabindex="-1" aria-checked="${ifDefined(this.selected)}" ?indeterminate=${this.indeterminate} accessible-name="checkbox" ?checked="${this.selected}" ?disabled="${this.disabled}"></ui5-checkbox>`;}
function block2 (this: DropdownListItem, context: UI5Element, tags: string[], suffix: string | undefined) { return html`<span class="udex-dropdown-list__supporting-text">${ifDefined(this.supportingText)}</span>`;}


export default block0;