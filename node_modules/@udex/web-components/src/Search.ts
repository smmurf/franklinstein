import UI5Element, { ChangeInfo } from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import Integer from "@ui5/webcomponents-base/dist/types/Integer.js";
import ResizeHandler, { ResizeObserverCallback } from "@ui5/webcomponents-base/dist/delegate/ResizeHandler.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import { getI18nBundle } from "@ui5/webcomponents-base/dist/i18nBundle.js";
import { getFeature } from "@ui5/webcomponents-base/dist/FeaturesRegistry.js";
import Popover from "@ui5/webcomponents/dist/Popover.js";
import {
  isEnter,
  isTabNext,
  isTabPrevious,
  isUp,
  isDown,
  isEscape,
  isRight,
  isLeft,
} from "@ui5/webcomponents-base/dist/Keys.js";
import "@ui5/webcomponents-icons/dist/decline.js";
import "@ui5/webcomponents-icons/dist/search.js";
import "@ui5/webcomponents-icons/dist/microphone.js";
import debounce from "./utils/debounce.js";
import { SUGGESTED_TEXT, RECOMMENDED_TEXT } from "./generated/i18n/i18n-defaults.js";
import type SearchInputSuggestion from "./features/SearchSuggestionsPopover.js";

import SearchTemplate from "./generated/templates/SearchTemplate.lit.js";
import SearchSuggestionsTemplate from "./generated/templates/SearchSuggestionsTemplate.lit.js";

// Styles
import SearchCss from "./generated/themes/Search.css.js";
import SearchSuggestionsCss from "./generated/themes/SearchSuggestions.css.js";

type SuggestionRecommendLists = {
  suggested: Array<string>,
  recommended: Array<string>
}

export type SuggestionList = {
  handleSelectItem: () => void,
  text: string
}

enum Mode {
  Standard = "Standard",
  HomeSearch = "Home Search",
}

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 *
 * <h3>Usage</h3>
 *
 * For the <code>udex-search</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @udex/web-components/dist/Search.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webc.web-components.Search
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-search
 * @public
 */
@customElement({
  tag: "udex-search",
  renderer: litRender,
  styles: SearchCss,
  template: SearchTemplate,
  staticAreaStyles: SearchSuggestionsCss,
  staticAreaTemplate: SearchSuggestionsTemplate,
  get dependencies() {
    const Suggestion = getFeature<typeof SearchInputSuggestion>("SearchInputSuggestion");
    return ([Popover] as Array<typeof UI5Element>).concat(Suggestion ? Suggestion.dependencies : []);
  },
})

/**
 * Fired event when the user submitted the value.
 *
 * @event sap.ui.webc.web-components.Search#submitSearchValue
 * @public
 */
@event("submit-search-value", { detail: { value: { type: String } } })
/**
 * Fired event when the user typed to search field.
 *
 * @event sap.ui.webc.web-components.Search#handleValueSearch
 */
@event("handle-value-search", { detail: { value: { type: String } } })
/**
 * Fired event when the user clicks on the reset button.
 *
 * @event sap.ui.webc.web-components.Search#handleResetValue
 */
@event("handle-value-reset")
class Search extends UI5Element {
  static i18nBundle: any;
  _labelActiveClassName = "udex-search__label--active";
  _voiceActiveClassName = "udex-search__voice-button--active";
  _focusActiveClassName = "udex-search__container--focus";
  _handleResizeBound: ResizeObserverCallback;
  suggestedList!: Array<SuggestionList>;
  recommendedList!: Array<SuggestionList>;
  speechRecognition!: any;
  Suggestion?: SearchInputSuggestion;
  /**
   * Defines the value of the component.
   *
   * @type {string}
   * @name sap.ui.webc.web-components.Search.prototype.value
   * @defaultvalue ""
   * @formEvents input
   * @formProperty
   * @public
   */
  @property({ type: String })
    value!: string;

  /**
   * Defines label text for the input field.
   *
   * @type {string}
   * @name sap.ui.webc.udex.Search.prototype.label
   * @defaultvalue ""
   * @public
   */
  @property({ type: String })
    label!: string;

  /**
   * Defines display the reset button for the search field.
   *
   * @type {string}
   * @name sap.ui.webc.udex.Search.property.showResetButton
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean, noAttribute: true })
    showResetButton!: boolean;

  /**
   * Defines display the submit button for the search field.
   *
   * @type {string}
   * @name sap.ui.webc.udex.Search.property.showSubmitButton
   * @defaultvalue true
   * @public
   */
  @property({ type: Boolean })
    showSubmitButton!: boolean;

  /**
   * Defines display the voice button for the search field.
   *
   * @type {string}
   * @name sap.ui.webc.udex.Search.property.showVoiceButton
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
    showVoiceButton!: boolean;

  /**
   * Defines suggestions and recommended lists for the component.
   * <br><br>
   * <b>Note:</b> Structure of the property:
   * { suggested: ["string", string, ...], recommended: ["string", "string", ...] }
   *
   * @type {string}
   * @name sap.ui.webc.udex.Search.property.suggestionList
   * @defaultvalue ""
   * @public
   */
  @property({ type: String })
    suggestionList!: string;
  /**
   * Width of the search component
   * @private
   */
  @property({ validator: Integer })
    _searchWidth?: number;

  /**
   * Defines display the suggestion popover in the component.
   *
   * @type {boolean}
   * @name sap.ui.webc.udex.Search.property.showSuggestedPopover
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
    showSuggestedPopover!: boolean;

  /**
   * Defines the language of voice search.
   *
   * @type {string}
   * @name sap.ui.webc.udex.Search.property.languageVoice
   * @defaultvalue "en-US"
   * @public
   */
  @property({ type: String, defaultValue: "en-US" })
    languageVoice!: string;

  /**
   * Defines the mode of component.
   * <br><br>
   * <b>Note:</b> accepts a string "Standard" or "Home Search".
   * @type {string}
   * @name sap.ui.webc.udex.Search.property.mode
   * @defaultValue "Standard"
   * @public
   */
  @property({ type: String, defaultValue: "Standard" })
    mode!: "Standard" | "Home Search";

  /**
   * Defines the inner stored class of the label.
   *
   * @type {string}
   * @defaultvalue ""
   * @private
   */
  @property({ type: String, noAttribute: true, defaultValue: "" })
    labelActiveClass!: string;

  /**
   * Defines the voice active class of the button.
   *
   * @type {string}
   * @defaultvalue ""
   * @private
   */
  @property({ type: String, noAttribute: true, defaultValue: "" })
    voiceActiveClass!: string;

  /**
   * Defines the inner stored value of the classes of the label.
   *
   * @type {string}
   * @defaultvalue ""
   * @private
   */
  @property({ type: String, noAttribute: true, defaultValue: "" })
    labelClasses!: string;

  /**
   * Defines the class of focus on the input field.
   *
   * @type {string}
   * @defaultvalue ""
   * @private
   */
  @property({ type: String, noAttribute: true, defaultValue: "" })
    focusClasses!: string;

  /**
   * Defines the suggestion popover is opened
   *
   * @type {boolean}
   * @defaultvalue false
   * @private
   */
  @property({ type: Boolean, noAttribute: true })
    open!: boolean;

  constructor() {
    super();
    this._handleResizeBound = this._handleResize.bind(this);
  }

  static async onDefine(): Promise<void> {
    Search.i18nBundle = await getI18nBundle("udex-search");
  }

  onEnterDOM(): void {
    this.initSpeechRecognition();
    ResizeHandler.register(this, this._handleResizeBound);
  }

  onExitDOM(): void {
    ResizeHandler.deregister(this, this._handleResizeBound);
  }

  initSpeechRecognition(): void {
    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition || (window as any).mozSpeechRecognition || (window as any).msSpeechRecognition;
    this.speechRecognition = new SpeechRecognition();
    this.speechRecognition.continuous = true;
    this.speechRecognition.lang = this.languageVoice;
    this.speechRecognition.interimResults = false;
    this.speechRecognition.maxAlternatives = 5;
  }

  onInvalidation(changeInfo: ChangeInfo): void {
    this.setNewValue(changeInfo);
    this.setNewSuggestionList(changeInfo);
  }

  setNewValue(changeInfo: ChangeInfo): void {
    if (changeInfo.name === "value") {
      this.value = changeInfo.newValue as string;
      this.setSuggestedRecommendedLists(this.suggestionList);
    }
  }

  setNewSuggestionList(changeInfo: ChangeInfo): void {
    if (changeInfo.name === "suggestionList" && !!changeInfo.newValue) {
      this.setSuggestedRecommendedLists(changeInfo.newValue as string);
    }
  }

  setSuggestedRecommendedLists(value: string): void {
    if (this.value.length > 2 && value.length > 2) {
      const parsedData: SuggestionRecommendLists = JSON.parse(value);
      this.suggestedList = this.getListWithSuggestion(parsedData.suggested);
      this.recommendedList = this.getListWithSuggestion(parsedData.recommended);
    }
    if (!value.length) {
      this.onClosePopover();
    }
  }

  getListWithSuggestion(suggestedList: Array<string>): Array<SuggestionList> {
    return suggestedList?.map(item => ({
      handleSelectItem: this.handleSelectItem(item),
      text: this.getTextWithSuggestion(item),
    }));
  }

  getTextWithSuggestion(text: string): string {
    const search = new RegExp(this.value, "i");
    return text.replace(search, "<b>$&</b>");
  }

  handleSelectItem = (itemValue: string) => () => {
    this.value = itemValue;
    this.onSubmit();
  };

  onSubmit(): void {
    if (this.value.length) {
      this.onClosePopover();
      this.fireEvent("submit-search-value", { value: this.value });
    }
  }

  handleAraiExpanded() {
    const value = this.open.toString();
    this.shadowRoot?.querySelector("[udex-id='search-input']")?.setAttribute("aria-expanded", value);
  }

  onOpenPopover(): void {
    if (this.showSuggestedPopover && (this.suggestedList?.length || this.recommendedList?.length)) {
      this.Suggestion!.open();
      this.handleClassToRoot();
      this.handleAraiExpanded();
    }
  }

  onClosePopover(): void {
    if (this.showSuggestedPopover) {
      this.Suggestion!.close();
      this.handleClassToRoot();
      this.handleAraiExpanded();
    }
  }

  handleClassToRoot() {
    const hasAdditionRootClass = !this.shadowRoot?.querySelector(".udex-search__root")?.classList.contains("udex-search__root--show-popover");

    if (this.mode === Mode.HomeSearch && hasAdditionRootClass && this.open) {
      this.shadowRoot?.querySelector(".udex-search__root")?.classList.add("udex-search__root--show-popover");
    } else {
      this.shadowRoot?.querySelector(".udex-search__root")?.classList.remove("udex-search__root--show-popover");
    }
  }

  onBeforeRendering(): void {
    if (this.showSuggestedPopover) {
      this.enableSuggestions();
    }

    if (this.value && this.labelActiveClass === "") {
      this.labelActiveClass = this._labelActiveClassName;
    }

    this.labelClasses = `udex-search__label ${this.labelActiveClass}`;
  }

  enableSuggestions() {
    if (this.Suggestion) {
      return;
    }

    const Suggestion = getFeature<typeof SearchInputSuggestion>("SearchInputSuggestion");

    if (Suggestion) {
      this.Suggestion = new Suggestion(this);
    } else {
      throw new Error("You have to import '@udex/webcomponents/dist/features/SearchInputSuggestions.js' module to use udex-search suggestions");
    }
  }

  onAfterRendering(): void {
    if (this.showSuggestedPopover) {
      this.handleOutsideClick();
    }
  }

  handleOutsideClick(): void {
    document.addEventListener("mousedown", (e: MouseEvent) => {
      const popover = (e.target as HTMLElement).shadowRoot?.querySelector("[ui5-popover]");

      if (e.target !== this && popover !== this.Suggestion?.popover) {
        this.handleBlur();
        this.onClosePopover();
      }
    });
  }

  handleBlur(): void {
    if (this.value) {
      this.labelActiveClass = this._labelActiveClassName;
    } else {
      this.labelActiveClass = "";
    }
  }

  handleSearchChange(e: InputEvent): void {
    this.value = (e.target as HTMLInputElement)?.value;
    this.showResetButton = !!this.value.length;
    this.handleDebounce();
  }

  handleDebounce = debounce(() => {
    this.fireEvent("handle-value-search", { value: this.value });
    if (this.showSuggestedPopover && this.value.length > 2) {
      this.onOpenPopover();
    }
    if (this.showSuggestedPopover && this.value.length < 2) {
      this.onClosePopover();
    }
  });

  handleKeyDown = (e: KeyboardEvent) => {
    e.stopPropagation();
    this.handleEnterKey(e);
    this.handleTabKey(e);
    this.handleUpKey(e);
    this.handleDownKey(e);
    this.handleEscapeKey(e);
    this.handleRightKey(e);
    this.handleLeftKey(e);
  };

  handleEnterKey(e: KeyboardEvent) {
    if (isEnter(e) && !this.open) {
      e.preventDefault();
      this.onSubmit();
    }
    if (isEnter(e) && this.open) {
      this.Suggestion?.onEnter(e);
      this.onSubmit();
    }
  }

  handleTabKey(e: KeyboardEvent) {
    if (isTabNext(e) && this.open) {
      this.Suggestion?.onTab(e);
    }
  }

  handleTabPrevious(e: KeyboardEvent) {
    if (isTabPrevious(e) && this.open) {
      this.Suggestion?.onTabPrevious(e);
    }
  }

  handleUpKey(e: KeyboardEvent) {
    if (isUp(e) && this.open) {
      this.Suggestion?.onUp(e);
    }
  }

  handleDownKey(e: KeyboardEvent) {
    if (isDown(e) && this.open) {
      this.Suggestion?.onDown(e);
    }
  }

  handleEscapeKey(e: KeyboardEvent) {
    if (isEscape(e) && this.open) {
      this.Suggestion?.onEscape(e);
      this.handleClassToRoot();
    }
  }

  handleRightKey(e: KeyboardEvent) {
    if (isRight(e) && this.open) {
      this.Suggestion?.onRight();
    }
  }

  handleLeftKey(e: KeyboardEvent) {
    if (isLeft(e) && this.open) {
      this.Suggestion?.onLeft();
    }
  }

  handleFocus(): void {
    this.labelActiveClass = this._labelActiveClassName;
    this.focusClasses = this._focusActiveClassName;
  }

  handleFocusout(): void {
    this.focusClasses = "";
  }

  onReset(): void {
    this.value = "";
    this.showResetButton = false;
    this.onClosePopover();
    this.handleBlur();
    this.fireEvent("handle-value-reset");
  }

  onVoice(): void {
    if (this.speechRecognition) {
      this.onSpeechLaunch();
      this.onSpeechStart();
      this.onSpeechResult();
      this.onSpeechEnd();
    }
  }

  onSpeechLaunch(): void {
    if (!this.voiceActiveClass) {
      this.speechRecognition.start();
    } else {
      this.speechRecognition.stop();
    }
  }

  onSpeechStart(): void {
    this.speechRecognition.onstart = () => {
      this.voiceActiveClass = this._voiceActiveClassName;
      (this.shadowRoot?.querySelector("[id='search-input']") as HTMLInputElement)?.focus();
    };
  }

  onSpeechResult(): void {
    this.speechRecognition.onresult = (e: any) => {
      const last = e.results.length - 1;
      this.value = e.results[last][0].transcript;
      this.speechRecognition.stop();
    };
  }

  onSpeechEnd(): void {
    this.speechRecognition.onend = () => {
      this.voiceActiveClass = "";
      this.onSubmit();
      this.onShowResetButton();
    };
  }

  onShowResetButton(): void {
    if (this.value) {
      this.showResetButton = true;
    }
  }

  _handleResize() {
    this._searchWidth = this.offsetWidth;
  }

  get popoverStyles() {
    return {
      "width": this._searchWidth ? `${this._searchWidth}px` : "",
    };
  }

  get isShowResetButton(): boolean {
    return this.showResetButton && !!this.value.length;
  }

  get isShowSuggestedList(): boolean {
    return !!this.suggestedList?.length;
  }

  get isShowRecommendedList(): boolean {
    return !!this.recommendedList?.length;
  }

  get hasPopoverContent(): boolean {
    return !!(this.suggestedList?.length || this.recommendedList?.length);
  }

  get isShowSubmitButton(): boolean {
    return this.showSubmitButton;
  }

  get suggestedHeading(): string {
    return Search.i18nBundle.getText(SUGGESTED_TEXT) as string;
  }

  get recommendedHeading(): string {
    return Search.i18nBundle.getText(RECOMMENDED_TEXT) as string;
  }

  get isHomeSearchMode(): boolean {
    return this.mode === Mode.HomeSearch;
  }

  get homeSearchPopoverClass(): string {
    return this.isHomeSearchMode ? "udex-search-suggestions__root--home" : "";
  }

  get searchButtonActiveClass(): string {
    return this.isHomeSearchMode && this.open ? "udex-search__submit-button--active" : "";
  }

  get isNotEmptyClass(): string {
    return this.value.length > 2 || this.focusClasses.length ? " udex-search__container--has-value" : "";
  }
}

Search.define();

export default Search;
