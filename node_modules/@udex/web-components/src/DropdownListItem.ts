import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import CheckBox from "@ui5/webcomponents/dist/CheckBox.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import { isEnter, isSpace } from "@ui5/webcomponents-base/dist/Keys.js";
import { DropdownListMode } from "./DropdownList.js";
import DropdownListItemTemplate from "./generated/templates/DropdownListItemTemplate.lit.js";

// Styles
import DropdownListItemCss from "./generated/themes/DropdownListItem.css.js";

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 *
 * <h3>Usage</h3>
 *
 * For the <code>udex-dropdown-list-item</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @udex/web-components/dist/DropdownListItem.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webc.web-components.DropdownListItem
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-dropdown-list-item
 * @public
 */

@customElement({
  tag: "udex-dropdown-list-item",
  renderer: litRender,
  styles: DropdownListItemCss,
  template: DropdownListItemTemplate,
  dependencies: [CheckBox],
})

/**
 * Fired event when the user click on a dropdown list item.
 *
 * @event sap.ui.webc.web-components.DropdownListItem#itemFocus
 * @public
 */
@event("item-focus")
/**
 * Fired event when the user focuses on a dropdown list item.
 *
 * @event sap.ui.webc.web-components.DropdownListItem#itemClick
 * @public
 */
@event("item-press")
class DropdownListItem extends UI5Element {
  /**
   * Defines whether <code>ui5-li</code> is in disabled state.
   *
   * @type {boolean}
   * @name sap.ui.webc.web-components.DropdownListItem.prototype.disabled
   * @public
   */
  @property({ type: Boolean })
  disabled!: boolean;

  /**
   * Defines the <code>supportingText</code>, displayed in the end of the list item.
   *
   * @type {string}
   * @name sap.ui.webc.web-components.DropdownListItem.prototype.supportingText
   * @public
   */
  @property()
  supportingText!: string;

  /**
   * Indicates if the item is active.
   *
   * @type {boolean}
   * @name sap.ui.webc.web-components.DropdownListItem.prototype.active
   * @private
   */
  @property({ type: Boolean })
  active!: boolean;

  /**
   * Indicates if the item is on focus
   *
   * @type {boolean}
   * @name sap.ui.webc.web-components.DropdownListItem.prototype.focused
   * @private
   */
  @property({ type: Boolean })
  focused!: boolean;

  /**
   * Defines the selected state of the item.
   *
   * @type {boolean}
   * @name sap.ui.webc.web-components.DropdownListItem.prototype.selected
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
  selected!: boolean;

  /**
   * Defines the mode of the item.
   *
   * @type {string}
   * @name sap.ui.webc.web-components.DropdownListItem.prototype.mode
   * @defaultvalue "SingleSelect"
   * @public
   */
  @property({ type: DropdownListMode, defaultValue: DropdownListMode.SingleSelect })
  mode!: `${DropdownListMode}`;

  /**
   * Defines whether a visual separator should be rendered after the item.
   *
   * @name sap.ui.webc.web-components.DropdownListItem.prototype.endSection
   * @type {boolean}
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
  endSection!: boolean;

  /**
   * Defines whether the selection of a dropdown list is displayed as partially selected.
   *
   * @name sap.ui.webc.web-components.DropdownListItem.prototype.indeterminate
   * @type {boolean}
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
  indeterminate?: boolean;

  /**
   * Slot for dropdown list item content.
   *
   * @type {Node[]}
   * @name sap.ui.webc.web-components.DropdownListItem.prototype.content
   * @slot
   * @public
   */
  @slot({ type: Node, "default": true })
  content!: Array<Node>;

  @property({ type: String })
  _role!: string;

  deactivate: () => void;

  constructor() {
    super();

    this.deactivate = () => {
      if (this.active) {
        this.active = false;
      }
    };
  }

  onEnterDOM() {
    document.addEventListener("mouseup", this.deactivate);
  }

  onExitDOM() {
    document.removeEventListener("mouseup", this.deactivate);
  }

  handleMouseDown() {
    this.activate();
  }

  handleMouseUp() {
    this.deactivate();
  }

  handleKeyUp(e: KeyboardEvent) {
    e.preventDefault();
    if (isSpace(e) || isEnter(e)) {
      this.deactivate();
    }
  }

  handleKeyDown(e: KeyboardEvent) {
    if (isSpace(e) || isEnter(e)) {
      this.activate();
      this.handleItemClick(e);
    }
  }

  handleItemClick(e: Event) {
    if (this.disabled) {
      return;
    }
    this.selected = !this.selected;
    this.fireItemPress(e);
  }

  handleFocusIn() {
    if (this.disabled) {
      return;
    }
    this.focused = true;
    this.fireEvent("item-focus");
  }

  handleFocusOut() {
    if (this.disabled) {
      return;
    }
    this.focused = false;
    this.deactivate();
  }

  fireItemPress(e: Event) {
    if (isEnter(e as KeyboardEvent)) {
      e.preventDefault();
    }

    this.fireEvent("item-press");
  }

  activate() {
    if (!this.disabled) {
      this.active = true;
    }
  }

  getItems(): Array<DropdownListItem> {
    return this.getSlottedNodes<DropdownListItem>("items");
  }

  get modeMultiSelect() {
    return this.mode === DropdownListMode.MultiSelect;
  }

  get roleItem() {
    return this._role.length > 0 ? this._role : "listitem";
  }

  get _ariaDisabled() {
    return this.disabled ? true : undefined;
  }

  get _tabIndex() {
    if (this.disabled) {
      return -1;
    }
    return 0;
  }
}

DropdownListItem.define();

export default DropdownListItem;
