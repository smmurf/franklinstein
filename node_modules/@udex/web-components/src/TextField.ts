import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import Integer from "@ui5/webcomponents-base/dist/types/Integer.js";

// Template
import TextFieldTemplate from "./generated/templates/TextFieldTemplate.lit";

// Styles
import TextFieldCss from "./generated/themes/TextField.css.js";

enum ValueState {
  Standard = "Standard",
  Warning = "Warning",
  Error = "Error",
  Success = "Success",
}

/**
 * @class
 *
 * @constructor
 * @alias udex.components.TextField
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-text-field
 * @public
 */
@customElement({
  tag: "udex-text-field",
  renderer: litRender,
  styles: TextFieldCss,
  template: TextFieldTemplate,
})
class TextField extends UI5Element {
  _labelActiveClassName = "udex-text-field__label--active";

  /**
   * Defines whether the component is in disabled state.
   * <br><br>
   * <b>Note:</b> A disabled component is completely noninteractive.
   *
   * @type {boolean}
   * @name sap.ui.webc.udex.TextField.prototype.disabled
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
    disabled!: boolean;

  /**
   * Defines the value of the component.
   * <br><br>
   * <b>Note:</b> The property is updated upon typing.
   *
   * @type {string}
   * @name sap.ui.webc.udex.TextField.prototype.value
   * @defaultvalue ""
   * @formEvents input
   * @formProperty
   * @public
   */
  @property({ type: String })
    value!: string;

  /**
   * Sets the maximum number of characters available in the input field.
   * <br><br>
   * <b>Note:</b> This property is not compatible with the ui5-input type InputType.Number. If the ui5-input type is set to Number, the maxlength value is ignored.
   * @type {sap.ui.webc.base.types.Integer}
   * @name sap.ui.webc.udex.TextField.prototype.maxlength
   * @public
   */
  @property({ validator: Integer })
    maxlength?: number;

  /**
   * Defines label text for the input field.
   *
   * @type {string}
   * @name sap.ui.webc.udex.TextField.prototype.label
   * @defaultvalue ""
   * @public
   */
  @property({ type: String })
    label!: string;

  /**
   * Defines whether the component is read-only.
   * <br><br>
   * <b>Note:</b> A read-only component is not editable,
   * but still provides visual feedback upon user interaction.
   *
   * @type {boolean}
   * @name sap.ui.webc.udex.TextField.prototype.readonly
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
    readonly!: boolean;

  /**
   * Defines whether the component is display-only.
   * <br><br>
   * <b>Note:</b> A display-only component is not editable,
   * but still provides visual feedback upon user interaction, input border is not visible.
   *
   * @type {boolean}
   * @name sap.ui.webc.udex.TextField.prototype.displayonly
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
    displayonly!: boolean;

  /**
   * Defines whether the component is required.
   *
   * @type {boolean}
   * @name sap.ui.webc.udex.TextField.prototype.required
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
    required!: boolean;

  /**
   * Defines the value state of the component.
   *
   * @type {string}
   * @name sap.ui.webc.udex.TextField.prototype.valueState
   * @defaultvalue "Standard"
   * @public
   */
  @property({ type: ValueState, defaultValue: "Standard" })
    valueState!: "Standard" | "Warning" | "Error" | "Success";

  /**
   * Defines direction of the input.
   *
   * @type {string}
   * @name sap.ui.webc.udex.TextField.prototype.direction
   * @defaultvalue "left"
   * @public
   */
  @property({ type: String, defaultValue: "left" })
    direction?: "left" | "right";

  /**
   * Defines supporting text under the input field.
   *
   * @type {string}
   * @name sap.ui.webc.udex.TextField.prototype.supportingText
   * @defaultvalue ""
   * @public
   */
  @property({ type: String })
    supportingText!: string;

  /**
   * Defines the inner stored class of the label.
   *
   * @type {string}
   * @defaultvalue ""
   * @private
   */
  @property({ type: String, noAttribute: true, defaultValue: "" })
    labelActiveClass!: string;

  /**
   * Defines the inner stored value of the dir attribute of the input.
   *
   * @type {string}
   * @defaultvalue "ltr"
   * @private
   */
  @property({ type: String, noAttribute: true, defaultValue: "ltr" })
    dirValue!: string;

  /**
   * Defines the inner stored value of the readonly attribute of the input.
   *
   * @type {boolean}
   * @defaultvalue false
   * @private
   */
  @property({ type: Boolean, noAttribute: true, defaultValue: false })
    isInputReadonly!: boolean;

  /**
   * Defines the inner stored value of the classes of the label.
   *
   * @type {string}
   * @defaultvalue ""
   * @private
   */
  @property({ type: String, noAttribute: true, defaultValue: "" })
    labelClasses!: string;

  handleInput = (event: InputEvent) => {
    this.value = (event.target as HTMLInputElement)?.value;
  };

  handleFocus = () => {
    if (!this.disabled && !this.readonly && !this.displayonly) {
      this.labelActiveClass = this._labelActiveClassName;
    }
  };

  handleBlur = () => {
    if (this.value) {
      this.labelActiveClass = this._labelActiveClassName;
    } else {
      this.labelActiveClass = "";
    }
  };

  handleKeyDown = (event: KeyboardEvent) => {
    event.stopPropagation();
  };

  onBeforeRendering() {
    if (this.value && this.labelActiveClass === "") {
      this.labelActiveClass = this._labelActiveClassName;
    }

    if (this.direction === "left") {
      this.dirValue = "ltr";
    } else if (this.direction === "right") {
      this.dirValue = "rtl";
    }

    this.isInputReadonly = this.readonly || this.displayonly;

    this.labelClasses = `udex-text-field__label ${this.labelActiveClass}`;
  }
}

TextField.define();

export default TextField;
