import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import "@ui5/webcomponents/dist/Switch.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";

import "@ui5/webcomponents-icons/dist/accept.js";
import "@ui5/webcomponents-icons/dist/decline.js";
import "@ui5/webcomponents-icons/dist/less.js";

// Template
import SwitchTemplate from "./generated/templates/SwitchTemplate.lit.js";

// Styles
import SwitchCss from "./generated/themes/Switch.css.js";

enum SwitchColor {
  NonSemantic = "Non-Semantic",
  Semantic = "Semantic",
}

@customElement({
  tag: "udex-switch",
  renderer: litRender,
  styles: SwitchCss,
  template: SwitchTemplate,
})
/**
 * Fired when the component checked state changes.
 *
 * @allowPreventDefault
 * @public
 */
@event("change")
class Switch extends UI5Element {
  /**
   * Defines the label near switch.
   * @type {string}
   * @name udex.components.Switch.prototype.label
   * @defaultvalue ""
   * @public
   */
  @property({ type: String, defaultValue: "" })
  label!: string;

  /**
   * Defines the color of the component.
   * @type {SwitchColor}
   * @name udex.components.Switch.prototype.color
   * @defaultvalue SwitchColor.NonSemantic
   * @public
   */
  @property({ type: SwitchColor, defaultValue: SwitchColor.NonSemantic })
  color!: SwitchColor;

  /**
   * Sets the accessible ARIA name of the component.
   * @type {string}
   * @name udex.components.Switch.prototype.accessibleName
   * @defaultvalue ""
   * @public
   */
  @property({ type: String, defaultValue: "" })
  accessibleName!: string;

  /**
   * Defines if the component is checked.
   * @type {boolean}
   * @name udex.components.Switch.prototype.checked
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean, defaultValue: false })
  checked!: boolean;

  /**
   * Defines whether the component is disabled.
   * @type {boolean}
   * @name udex.components.Switch.prototype.disabled
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean, defaultValue: false })
  disabled!: boolean;

  /**
   * Defines the tooltip of the component.
   * @type {string}
   * @name udex.components.Switch.prototype.tooltip
   * @defaultvalue ""
   * @public
   */
  @property({ type: String, defaultValue: "" })
  tooltip!: string;

  handleSwitchClick(): void {
    if (!this.disabled) {
      this.checked = !this.checked;
      this.fireEvent("change", null, true);
    }
  }

  handleSwitchKeyDown(e: KeyboardEvent): void {
    if (e.key === "Enter") {
      this.handleSwitchClick();
    }
  }

  get switchTabIndex(): "0" | undefined {
    return this.disabled ? undefined : "0";
  }

  get isActiveTrackClass():
    | "udex-switch__track--active"
    | "udex-switch__track--inactive" {
    return this.checked ? "udex-switch__track--active" : "udex-switch__track--inactive";
  }

  get isSemanticColor(): boolean {
    return this.color === SwitchColor.Semantic;
  }
}

Switch.define();

export default Switch;
