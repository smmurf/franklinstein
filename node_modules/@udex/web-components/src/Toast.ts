import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import Toast from "@ui5/webcomponents/dist/Toast.js";
import "@ui5/webcomponents/dist/Icon.js";
import "@ui5/webcomponents-icons/dist/sys-enter-2.js";
import "@ui5/webcomponents-icons/dist/error.js";
import "@ui5/webcomponents-icons/dist/alert.js";

import ToastTemplate from "./generated/templates/ToastTemplate.lit.js";

// Styles
import ToastCss from "./generated/themes/Toast.css.js";
import redirectAttributes from "./utils/redirectAttributes.js";

enum ValueState {
  Action = "Action",
  Success = "Success",
  Warning = "Warning",
  Error = "Error"
}

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 *
 * <h3>Usage</h3>
 *
 * For the <code>udex-toast</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@udex/web-components/dist/Toast.js";</code>
 *
 * @constructor
 * @extends UI5Element
 * @public
 */
@customElement({
  tag: "udex-toast",
  renderer: litRender,
  styles: ToastCss,
  template: ToastTemplate,
  dependencies: [Toast],
})

/**
 * Emit when close icon was clicked
 *
 * @public
 */
@event("close")
class UdexToast extends UI5Element {
  /**
   * Defines the content of the component
   *
   * @public
   */
  @slot({ type: Node, "default": true })
    text!: Array<Node>;

  /**
  * Defines design state of component
  * @public
  * @type {SizeType}
  * @name udex.components.Toast.prototype.valueState
  * @defaultvalue ValueState.Action
  */

  @property({ type: ValueState, defaultValue: ValueState.Action })
    valueState!: ValueState;
  /**
  * Defines if close icon should be visible
  * @public
  * @type {boolean}
  * @name udex.components.Toast.prototype.hideCloseIcon
  * @defaultvalue false
  */
  @property({ defaultValue: false })
    hideCloseIcon!: boolean;

  /**
   * Shows the component.
   * @public
   */
  show(): void {
    const toastElement = this.getUI5ToastElement();
    if (!toastElement) { return; }
    toastElement.show();
  }

  get toastClasses(): string {
    return `udex-toast--${this.valueState.toLowerCase()}`;
  }

  get withIcon(): boolean {
    return this.valueState !== ValueState.Action;
  }

  get iconName(): string {
    switch (this.valueState) {
    case ValueState.Success:
      return "sys-enter-2";
    case ValueState.Error:
      return "error";
    case ValueState.Warning:
      return "alert";
    default:
      return "";
    }
  }

  get iconDesign(): string {
    switch (this.valueState) {
    case ValueState.Success:
      return "Positive";
    case ValueState.Error:
      return "Negative";
    case ValueState.Warning:
      return "Critical";
    default:
      return "Default";
    }
  }

  closeToast() {
    const toastElement = this.getUI5ToastElement();
    if (!toastElement) { return; }
    toastElement.open = false;
    this.fireEvent("close");
  }

  getUI5ToastElement() {
    return this.shadowRoot!.querySelector<Toast>("#udex-toast");
  }

  onAfterRendering() {
    redirectAttributes(this, "udex-toast");
  }
}

UdexToast.define();

export default UdexToast;
