import type UI5Element from "@ui5/webcomponents-base/dist/UI5Element";
import { registerFeature } from "@ui5/webcomponents-base/dist/FeaturesRegistry.js";
import Button from "@ui5/webcomponents/dist/Button.js";
import Popover from "@ui5/webcomponents/dist/Popover.js";

interface SuggestionComponent extends UI5Element {
  open: boolean;
  value?: string;
  suggestionItems?: string;
}

type SearchInputSuggestion = {
  handleSelectItem: () => void;
  text: string;
}

/**
 * A class to manage the <code>Search</code suggestion items.
 *
 * @class
 * @private
 * @author SAP SE
 */
class Suggestion {
  component: SuggestionComponent;
  popover?: Popover | null;
  selectedItemIndex: number;

  constructor(component: SuggestionComponent) {
    this.component = component;
    this._getSuggestionPopover();
    this.selectedItemIndex = -1;
  }

  _getComponent(): SuggestionComponent {
    return this.component;
  }

  async _getSuggestionPopover() {
    if (this.popover) {
      return this.popover;
    }

    const staticAreaItem = await this._getComponent().getStaticAreaItemDomRef();
    this.popover = staticAreaItem!.querySelector<Popover>("[ui5-popover]");
    return this.popover;
  }

  _getItems() {
    return this.popover ? [...this.popover?.querySelectorAll("[ui5-button]")] : [];
  }

  open(): void {
    this._getComponent().open = true;
    this.popover!.showAt(this._getComponent());
  }

  close(): void {
    this._getComponent().open = false;
    this.popover?.close(true);
    this.selectedItemIndex = -1;
  }

  onFocusInput(): void {
    this.component.shadowRoot?.querySelector("input")?.focus();
    this.selectedItemIndex = -1;
  }

  onEnter(e: KeyboardEvent) {
    e.preventDefault();
    if (this.selectedItemIndex >= 0) {
      this.component.value = this._getItems()[this.selectedItemIndex].getAttribute("title")?.replace(/<[^>]*>?/gm, "");
    }
  }

  onTab(e: KeyboardEvent) {
    this.onDown(e);
  }

  onTabPrevious(e: KeyboardEvent) {
    this.onUp(e);
  }

  onUp(e: KeyboardEvent) {
    e.preventDefault();
    if (this._getItems().length) {
      const itemCount = this._getItems().length - 1;
      const previousSelectedIdx = this.selectedItemIndex;

      if (previousSelectedIdx === -1) {
        (this._getItems()[itemCount] as HTMLElement).focus();
        this.selectedItemIndex = itemCount;
        return true;
      }
      if (previousSelectedIdx > 0 && previousSelectedIdx <= itemCount) {
        (this._getItems()[previousSelectedIdx - 1] as HTMLElement).focus();
        this.selectedItemIndex = previousSelectedIdx - 1;
        return true;
      }
      if (previousSelectedIdx === 0) {
        this.onFocusInput();
        return true;
      }
    }
  }

  onDown(e: KeyboardEvent) {
    e.preventDefault();
    if (this._getItems().length) {
      const itemCount = this._getItems().length - 1;
      const nextSelectedIdx = this.selectedItemIndex;

      if (nextSelectedIdx === -1) {
        (this._getItems()[0] as HTMLElement).focus();
        this.selectedItemIndex = 0;
        return true;
      }
      if (nextSelectedIdx >= 0 && nextSelectedIdx !== itemCount) {
        (this._getItems()[nextSelectedIdx + 1] as HTMLElement).focus();
        this.selectedItemIndex = nextSelectedIdx + 1;
        return true;
      }
      if (nextSelectedIdx === itemCount) {
        this.onFocusInput();
        return true;
      }
    }
  }

  onRight() {
    this.onFocusInput();
  }

  onLeft() {
    this.onFocusInput();
  }

  onEscape(e: KeyboardEvent) {
    e.preventDefault();
    this.close();
  }

  static get dependencies() {
    return [
      Popover,
      Button,
    ];
  }
}

registerFeature("SearchInputSuggestion", Suggestion);

export default Suggestion;

export type {
  SuggestionComponent,
  SearchInputSuggestion,
};
