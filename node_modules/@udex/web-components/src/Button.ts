import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import "@ui5/webcomponents/dist/Button.js";
import "@ui5/webcomponents-icons/dist/AllIcons.js";

// Template
import ButtonTemplate from "./generated/templates/ButtonTemplate.lit.js";

// Styles
import ButtonCss from "./generated/themes/Button.css";

@customElement({
  tag: "udex-button",
  renderer: litRender,
  styles: ButtonCss,
  template: ButtonTemplate,
})

/**
 * Fires when button is clicked
 *
 * @allowPreventDefault
 * @public
 */
@event("click")

class Button extends UI5Element {
  /**
   * Defines whether the component is in disabled state.
   * <br><br>
   * <b>Note:</b> A disabled component is completely noninteractive.
   * @type {boolean}
   * @name sap.ui.webc.udex.Button.prototype.disabled
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
    disabled!: boolean;

  /**
   * Defines the size of the component.
   * <br><br>
   * <b>Note:</b> There are three different sizes to choose from.
   * @type {string}
   * @name sap.ui.webc.udex.Button.prototype.size
   * @defaultvalue "cozy"
   * @public
   */
  @property({ type: String, defaultValue: "Medium" })
    size!: string;

  /**
   * Defines the tooltip of the component.
   * @type {string}
   * @name sap.ui.webc.udex.Button.prototype.tooltip
   * @defaultvalue ""
   * @public
   */
  @property({ type: String, defaultValue: "" })
    tooltip!: string;

  /**
   * Defines the design of the component.
   * <br><br>
   * <b>Note:</b> The color-schema is different for each design.
   *
   * @type {string}
   * @name sap.ui.webc.udex.Button.prototype.design
   * @defaultvalue "primary"
   * @public
   */
  @property({ type: String, defaultValue: "Primary" })
    design!: "Primary" | "Secondary" | "Tertiary" | "Positive" | "Negative" | "Warning";

  /**
   * TODO:Beschreibung
   * @type {string}
   * @name sap.ui.webc.udex.Button.prototype.size
   * @defaultvalue "cozy"
   * @public
   */
  @property({ type: String })
    icon!: "Small" | "Medium" | "Large";

  /**
   * Controls if the buttons will only show an icon and no text
   * <br><br>
   * <b>Note:</b> It should be provided an icon with the "icon" property
   * @type {boolean}
   * @name sap.ui.webc.udex.Button.prototype.iconOnly
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
    iconOnly!: boolean;

  /**
   * Renders the slot with name "icon" before or after the buttonlabel.
   * <br><br>
   * <b>Note:</b> Only has effect if a slot with name "icon" is provided
   * @type {boolean}
   * @name sap.ui.webc.udex.Button.prototype.iconEnd
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
    iconEnd!: boolean;

  /**
   * Sets a toggled state of the component.
   * <br><br>
   * <b>Note:</b> The Color-schema is different in toggled state.
   * @type {boolean}
   * @name sap.ui.webc.udex.Button.prototype.toggled
   * @defaultvalue false
   * @public
   */
  @property({ type: Boolean })
    toggled!: boolean;

  /**
   * Controls id of the element that label the component
   * @type {string}
   * @name sap.ui.webc.udex.Button.prototype.accessibleNameRef
   * @defaultvalue ""
   * @public
   */
  @property({ type: String })
    accessibleNameRef!: string;

  /**
   * Controls the ARIA name of the button
   * @type {string}
   * @name sap.ui.webc.udex.Button.prototype.accessibleName
   * @defaultvalue ""
   * @public
   */
  @property({ type: String })
    accessibleName!: string;

  /**
   * Defines the label of the component.
   * <br><br>
   * <b>Note:</b> Provide an "icon"-slot and an empty label to create an icon-only button.
   * @type {Node}
   * @name sap.ui.webc.udex.Button.prototype.default
   * @defaultvalue undefined
   * @public
   */
  @slot({ type: Node })
    default!: Node;

  onButtonClick(e: Event): void {
    e.stopPropagation();
    if (this.disabled === false) {
      this.fireEvent("click");
    }
  }

  get renderIconOnlyButton() {
    return !this.iconOnly;
  }

  get sizeClass() {
    switch (this.size) {
    case "Small":
      return "udex-button--small";
    case "Medium":
      return "udex-button--medium";
    case "Large":
      return "udex-button--large";
    default:
      return "udex-button--medium";
    }
  }
}

Button.define();

export default Button;
