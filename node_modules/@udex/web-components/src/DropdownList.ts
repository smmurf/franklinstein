import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import {
  isUp,
  isDown,
  isHome,
  isEnd,
} from "@ui5/webcomponents-base/dist/Keys.js";
import { getI18nBundle } from "@ui5/webcomponents-base/dist/i18nBundle.js";
import type I18nBundle from "@ui5/webcomponents-base/dist/i18nBundle.js";
import browserScrollbarCSS from "@ui5/webcomponents/dist/generated/themes/BrowserScrollbar.css.js";
import DropdownListItem from "./DropdownListItem.js";
import DropdownListTemplate from "./generated/templates/DropdownListTemplate.lit.js";
import { ARIA_LABEL_DROPDOWN_LIST_MULTISELECTABLE, ARIA_LABEL_DROPDOWN_LIST_SELECTABLE } from "./generated/i18n/i18n-defaults.js";

// Styles
import DropdownListCss from "./generated/themes/DropdownList.css.js";

export enum DropdownListMode {
  SingleSelect = "SingleSelect",
  MultiSelect = "MultiSelect",
}

/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 *
 *
 * <h3>Usage</h3>
 *
 * For the <code>udex-dropdown-list</code>
 * <h3>ES6 Module Import</h3>
 *
 * <code>import @udex/web-components/dist/DropdownList.js";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webc.web-components.DropdownList
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-dropdown-list
 * @public
 */
@customElement({
  tag: "udex-dropdown-list",
  renderer: litRender,
  styles: [DropdownListCss, browserScrollbarCSS],
  template: DropdownListTemplate,
  dependencies: [],
})

@event("selection-change", {
  detail: {
    selectedItems: { type: Array },
    item: { type: HTMLElement },
  },
})

class DropdownList extends UI5Element {
  /**
   * Defines the accessible role of the component.
   *
   * @type {string}
   * @name sap.ui.webc.web-components.DropdownList.prototype.accessibleRole
   * @defaultvalue "list"
   * @public
   */
  @property({ defaultValue: "list" })
  accessibleRole!: string;

  /**
   * Defines the accessible name of the component.
   *
   * @type {string}
   * @name sap.ui.webc.web-components.DropdownList..prototype.accessibleName
   * @defaultvalue ""
   * @public
   */
  @property()
  accessibleName!: string;

  /**
   * Defines the mode of the component.
   *
   * @type {string}
   * @name sap.ui.webc.web-components.DropdownList.prototype.mode
   * @defaultvalue "SingleSelect"
   * @public
   */
  @property({ type: DropdownListMode, defaultValue: DropdownListMode.SingleSelect })
  mode!: `${DropdownListMode}`;

  /**
   * Allows control over the height.
   * @type {string}
   * @name sap.ui.webc.web-components.DropdownList.prototype.height
   * @public
   */
  @property({ type: String })
  height?: string;

  /**
   * Slot for dropdown list items.
   *
   * @type @type {HTMLElement[]}
   * @name sap.ui.webc.web-components.DropdownList.prototype.default
   * @slot items
   * @public
   */
  @slot({ type: HTMLElement, "default": true })
  items!: Array<HTMLElement>;

  static i18nBundle: I18nBundle;

  static async onDefine(): Promise<void> {
    DropdownList.i18nBundle = await getI18nBundle("sap-ui-webcomponents-bundle");
  }

  onBeforeRendering() {
    this.prepareListItemsMode();
  }

  handleItemPress(e: CustomEvent) {
    e.stopPropagation();
    const clickedItem = e.target as DropdownListItem;

    if (this.mode === DropdownListMode.SingleSelect) {
      this.revertSelectedItems();
      clickedItem.selected = true;
    }

    this.fireEvent("selection-change", {
      selectedItems: this.getSelectedItems(),
      item: clickedItem,
    });
  }

  handleKeyDown(e: KeyboardEvent) {
    this.handleUpArrow(e);
    this.handleDownArrow(e);
    this.handleHomeKey(e);
    this.handleEndKey(e);
  }

  handleUpArrow(e: KeyboardEvent) {
    if (isUp(e)) {
      e.preventDefault();
      const items = this.getKeyboardNavigationItems();
      const currentSelectedIndex = this.getCurrentIndex(items, e.target as DropdownListItem);
      const previousSelectIndex = currentSelectedIndex - 1 < 0 ? items.length - 1 : currentSelectedIndex - 1;
      const isHeaderItem = this.isHeader(items[previousSelectIndex]);

      if (isHeaderItem) {
        this.focusHeader(items[previousSelectIndex]);
        return;
      }

      items[previousSelectIndex].focus();
    }
  }

  handleDownArrow(e: KeyboardEvent) {
    if (isDown(e)) {
      e.preventDefault();
      const items = this.getKeyboardNavigationItems();
      const currentSelectedIndex = this.getCurrentIndex(items, e.target as DropdownListItem);
      const nextSelectIndex = currentSelectedIndex + 1 > items.length - 1 ? 0 : currentSelectedIndex + 1;
      const isHeaderItem = this.isHeader(items[nextSelectIndex]);

      if (isHeaderItem) {
        this.focusHeader(items[nextSelectIndex]);
        return;
      }

      items[nextSelectIndex].focus();
    }
  }

  handleHomeKey(e: KeyboardEvent) {
    if (isHome(e)) {
      const items = this.getKeyboardNavigationItems();
      const isHeaderItem = this.isHeader(items[0]);

      if (isHeaderItem) {
        this.focusHeader(items[0]);
        return;
      }

      items[0].focus();
    }
  }

  handleEndKey(e: KeyboardEvent) {
    if (isEnd(e)) {
      e.preventDefault();
      const items = this.getKeyboardNavigationItems();
      items[items.length - 1].focus();
    }
  }

  revertSelectedItems() {
    const previouslySelectedItems = this.getSelectedItems();
    previouslySelectedItems.forEach((item: DropdownListItem) => {
      item.selected = false;
    });
  }

  focusHeader(item: DropdownListItem) {
    const header = item.shadowRoot?.querySelector(".udex-dropdown-list__group-header") as HTMLElement;
    header.focus();
  }

  getItems(): Array<DropdownListItem> {
    return this.getSlottedNodes<DropdownListItem>("items");
  }

  getSelectedItems(): Array<DropdownListItem> {
    return this.getItemsFromList().filter(item => item.selected);
  }

  getCurrentIndex(items: Array<DropdownListItem>, item: DropdownListItem): number {
    return items.indexOf(item);
  }

  getItemsWithoutHeader(): Array<DropdownListItem> {
    return this.getItemsFromList().filter(item => !this.isHeader(item));
  }

  getKeyboardNavigationItems(): Array<DropdownListItem> {
    const items = this.modeMultiSelect ? this.getItemsFromList() : this.getItemsWithoutHeader();
    return items.filter(item => !item.disabled);
  }

  getItemsFromList(): Array<DropdownListItem> {
    const items: DropdownListItem[] = [];
    const slottedItems = this.getItems();

    slottedItems.forEach(item => {
      const childItems = item.children.length > 0 ? item.getItems() : [];
      items.push(item, ...childItems);
    });

    return items;
  }

  prepareListItemsMode() {
    const slottedItems = this.getItemsFromList();
    slottedItems.forEach(item => {
      item.mode = this.mode;
    });
  }

  isHeader(item: DropdownListItem): boolean {
    return item.tagName === "UDEX-DROPDOWN-LIST-GROUP-HEADER";
  }

  get ariaLabelModeText(): string {
    if (this.modeMultiSelect) {
      return DropdownList.i18nBundle.getText(ARIA_LABEL_DROPDOWN_LIST_MULTISELECTABLE);
    }
    return DropdownList.i18nBundle.getText(ARIA_LABEL_DROPDOWN_LIST_SELECTABLE);
  }

  get ariaLabelledBy() {
    return `${this._id}-modeLabel`;
  }

  get modeMultiSelect() {
    return this.mode === DropdownListMode.MultiSelect;
  }

  get holderHeight() {
    return this.height ? this.height : "auto";
  }
}

DropdownList.define();

export default DropdownList;
