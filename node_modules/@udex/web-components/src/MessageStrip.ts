import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import slot from "@ui5/webcomponents-base/dist/decorators/slot.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import { getI18nBundle, I18nText } from "@ui5/webcomponents-base/dist/i18nBundle.js";
import type I18nBundle from "@ui5/webcomponents-base/dist/i18nBundle.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import "@ui5/webcomponents/dist/MessageStrip.js";
import UI5MessageStripDesign from "@ui5/webcomponents/dist/types/MessageStripDesign.js";
import {
  MESSAGE_STRIP_CLOSE_BUTTON,
  MESSAGE_STRIP_INFORMATION,
  MESSAGE_STRIP_SUCCESS,
  MESSAGE_STRIP_WARNING,
  MESSAGE_STRIP_ERROR,
} from "./generated/i18n/i18n-defaults.js";
import redirectAttributes from "./utils/redirectAttributes.js";

import MessageStripTemplate from "./generated/templates/MessageStripTemplate.lit.js";

// Styles
import MessageStripCss from "./generated/themes/MessageStrip.css.js";

enum UdexMessageStripDesign {
  Action = "Action",
}

type MessageStripDesign = UI5MessageStripDesign | UdexMessageStripDesign;
export const MessageStripDesign = { ...UI5MessageStripDesign, ...UdexMessageStripDesign };

export enum UdexMessageStripStatusType {
  Icon = "Icon",
  Text = "Text",
  None = "None",
}

type textStatusType = Record<UI5MessageStripDesign, string>;

/**
 * @class
 *
 * @constructor
 * @alias udex.components.MessageStrip
 * @extends sap.ui.webc.base.UI5Element
 * @tagname udex-message-strip
 * @public
 */
@customElement({
  tag: "udex-message-strip",
  renderer: litRender,
  styles: MessageStripCss,
  template: MessageStripTemplate,
})
/**
 * Fired when the close button is pressed either with a
 * click/tap or by using the Enter or Space key.
 *
 * @public
 */
@event("close")
class MessageStrip extends UI5Element {
  /**
   * Defines the component type.
   *
   * @type {MessageStripDesign}
   * @name udex.components.MessageStrip.prototype.design
   * @public
   */
  @property({
    type: MessageStripDesign,
    defaultValue: MessageStripDesign.Action,
  })
  design!: `${MessageStripDesign}`;

  /**
   * Defines the component Status Type.
   *
   * @type {UdexMessageStripStatusType}
   * @name udex.components.MessageStrip.prototype.statusType
   * @public
   */
  @property({
    type: UdexMessageStripStatusType,
    defaultValue: UdexMessageStripStatusType.Icon,
  })
  statusType!: `${UdexMessageStripStatusType}`;

  /**
   * Defines whether the MessageStrip renders close button.
   *
   * @type {boolean}
   * @name udex.components.MessageStrip.prototype.hideCloseButton
   * @public
   */
  @property({ type: Boolean })
  hideCloseButton!: boolean;

  /**
   * Defines display the icon for the Message Strip.
   *
   * @type {boolean}
   * @name udex.components.MessageStrip.prototype.hideIcon
   * @private
   */
  @property({ type: Boolean })
  hideIcon!: boolean;

  /**
   * Defines the content of the component.
   *
   * @type {Node}
   * @name udex.components.MessageStrip.prototype.default
   * @slot
   * @public
   */
  @slot({ type: Node }) default!: Node;

  static i18nBundle: I18nBundle;

  static async onDefine() {
    MessageStrip.i18nBundle = await getI18nBundle("sap-ui-webcomponents-bundle");
  }

  getTranslation(text: I18nText): string {
    return MessageStrip.i18nBundle.getText(text);
  }

  textStatusTypeMapping(): textStatusType {
    return {
      Information: this.getTranslation(MESSAGE_STRIP_INFORMATION),
      Positive: this.getTranslation(MESSAGE_STRIP_SUCCESS),
      Negative: this.getTranslation(MESSAGE_STRIP_ERROR),
      Warning: this.getTranslation(MESSAGE_STRIP_WARNING),
    };
  }

  onBeforeRendering() {
    if (this.isDesignAction() || this.statusType !== UdexMessageStripStatusType.Icon) {
      this.hideIcon = true;
    }
  }

  onAfterRendering() {
    redirectAttributes(this, "message-strip");
  }

  isDesignAction() {
    return this.design === MessageStripDesign.Action;
  }

  get showTextStatus() {
    return this.statusType === UdexMessageStripStatusType.Text && !this.isDesignAction();
  }

  get textStatus(): string | undefined {
    if (this.design !== MessageStripDesign.Action) {
      return this.textStatusTypeMapping()[this.design];
    }
  }

  get _closeButtonText() {
    return this.getTranslation(MESSAGE_STRIP_CLOSE_BUTTON);
  }

  _closeClick() {
    this.fireEvent("close");
  }
}

MessageStrip.define();

export default MessageStrip;
